<?php namespace ZN\Helpers\Converter;

use stdClass;
use ZN\DataTypes\Strings\Split;

class VariableTypes
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // To Int
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toInt($var) : Int
    {
        return (int) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Integer
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toInteger($var) : Int
    {
        return (int) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Bool
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toBool($var) : Bool
    {
        return (bool) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Boolean
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toBoolean($var) : Bool
    {
        return (bool) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To String
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toString($var) : String
    {
        if( is_array($var) || is_object($var) )
        {
            return implode(' ', (array) $var);
        }

        return (string) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Float
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toFloat($var) : Float
    {
        return (float) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Real
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toReal($var)
    {
        return (real) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Double
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toDouble($var)
    {
        return (double) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Object
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toObject($var) : stdClass
    {
        return (object) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Object Recursive -> 5.0.0
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toObjectRecursive($var) : stdClass
    {
        $object = new stdClass;

        return self::objectRecursive((array) $var, $object);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Array
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toArray($var) : Array
    {
        return (array) $var;
    }

    //--------------------------------------------------------------------------------------------------------
    // To Constant
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $var
    // @param string $prefix
    // @param string $suffix
    //
    //--------------------------------------------------------------------------------------------------------
    public static function toConstant(String $var, String $prefix = NULL, String $suffix = NULL)
    {
        $var = implode('_', Split::upperCase($var));
        
        $variable = \Autoloader::upper($prefix . $var . $suffix);

        if( defined($variable) )
        {
            return constant($variable);
        }
        elseif( defined($var) )
        {
            return constant($var);
        }
        else
        {
            if( is_numeric($var) )
            {
                return (int) $var;
            }

            return $var;
        }
    }

    //--------------------------------------------------------------------------------------------------
    // Protected Object Recursive
    //--------------------------------------------------------------------------------------------------
    //
    // @param array    $array
    // @param stdClass $obj
    //
    // @return string
    //
    //--------------------------------------------------------------------------------------------------
    protected static function objectRecursive(Array $array, stdClass &$std) : stdClass
    {
        foreach( $array as $key => $value )
        {
            if( is_array($value) )
            {
                $std->$key = new stdClass;

                self::objectRecursive($value, $std->$key);
            }
            else
            {
                $std->$key = $value;
            }
        }

        return $std;
    }
}
