<?php namespace ZN\CryptoGraphy;

use Support;

class InternalCrypto extends \Requirements implements CryptoInterface
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif Hakkı: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------
    
    //--------------------------------------------------------------------------------------------------------
    // Drivers
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $drivers =
    [
        'hash',
        'mhash',
        'phash',
        'openssl',
        'mcrypt'
    ];
    
    //--------------------------------------------------------------------------------------------------------
    // Protected Crypto
    //--------------------------------------------------------------------------------------------------------
    //
    // Sürücü bilgisi 
    //
    // @var  string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $crypto;
    
    //--------------------------------------------------------------------------------------------------------
    // Construct
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param  string $driver
    // @return bool
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct(String $driver = NULL)
    {
        $this->config = config('CryptoGraphy', 'crypto');

        nullCoalesce($driver, $this->config['driver']);

        Support::driver($this->drivers, $driver);

        $this->crypto = $this->_drvlib($driver);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Encrypt
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $data
    // @param array  $settings
    //
    //--------------------------------------------------------------------------------------------------------
    public function encrypt(String $data,  Array $settings = []) : String
    {
        return $this->crypto->encrypt($data, $settings);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Decrypt
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $data
    // @param array  $settings
    //
    //--------------------------------------------------------------------------------------------------------
    public function decrypt(String $data, Array $settings = []) : String
    {
        return $this->crypto->decrypt($data, $settings);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Keygen
    //--------------------------------------------------------------------------------------------------------
    //
    // @param numeric $length
    //
    //--------------------------------------------------------------------------------------------------------
    public function keygen(Int $length = 8) : String
    {
        return $this->crypto->keygen($length);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Driver                                                                       
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $driver
    // @return object                                    
    //                                                                                           
    //--------------------------------------------------------------------------------------------------------
    public function driver(String $driver) : InternalCrypto
    {
        return new self($driver);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Drvlib                                                                       
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $driver
    // @return object                                    
    //                                                                                           
    //--------------------------------------------------------------------------------------------------------
    protected function _drvlib($driver)
    {
        return uselib('ZN\CryptoGraphy\Drivers\\'.$driver.'Driver');
    }
}