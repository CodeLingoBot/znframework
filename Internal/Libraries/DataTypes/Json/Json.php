<?php namespace ZN\DataTypes;

use Converter, CallController;
use ZN\DataTypes\Json\Exception\JsonErrorException;

class InternalJson extends CallController implements JsonInterface
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif HakkÄ±: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Encode
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed  $data
    // @param string $type
    //
    //--------------------------------------------------------------------------------------------------------
    public function encode($data, String $type = 'unescaped_unicode') : String
    {
        $return = json_encode($data, Converter::toConstant($type, 'JSON_'));

        if( $this->errno() )
        {
            throw new JsonErrorException('[Json::encode()] -> '.$this->error());
        }

        return $return;
    }

    //--------------------------------------------------------------------------------------------------------
    // Decode
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $data
    // @param bool   $array
    // @param int    $length
    //
    //--------------------------------------------------------------------------------------------------------
    public function decode(String $data, Bool $array = false, Int $length = 512)
    {
        $return = json_decode($data, $array, $length);

        if( $this->errno() )
        {
            throw new JsonErrorException('[Json::decode()] -> '.$this->error());
        }

        return $return;
    }

    //--------------------------------------------------------------------------------------------------------
    // Decode Object
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $data
    // @param int    $length
    //
    //--------------------------------------------------------------------------------------------------------
    public function decodeObject(String $data, Int $length = 512)
    {
        return $this->decode($data, false, $length);
    }

    //--------------------------------------------------------------------------------------------------------
    // Decode Array
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $data
    // @param int    $length
    //
    //--------------------------------------------------------------------------------------------------------
    public function decodeArray(String $data, Int $length = 512) : Array
    {
        return $this->decode($data, true, $length);
    }

    //--------------------------------------------------------------------------------------------------------
    // Error
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function error() : String
    {
        return json_last_error_msg();
    }

    //--------------------------------------------------------------------------------------------------------
    // Errval
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function errval() : String
    {
        return $this->error();
    }

    //--------------------------------------------------------------------------------------------------------
    // Errno
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function errno() : Int
    {
        return json_last_error();
    }
}
