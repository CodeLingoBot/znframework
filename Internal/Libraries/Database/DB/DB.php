<?php
namespace ZN\Database;

class InternalDB extends DatabaseCommon implements DBInterface
{	
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Variable Types
	//----------------------------------------------------------------------------------------------------
	// 
	// int()
	// varchar()
	// ...
	//
	//----------------------------------------------------------------------------------------------------
	use DB\Traits\VariableTypesTrait;
	
	//----------------------------------------------------------------------------------------------------
	// Statements
	//----------------------------------------------------------------------------------------------------
	// 
	// autoIncrement()
	// notNull()
	// ...
	//
	//----------------------------------------------------------------------------------------------------
	use DB\Traits\StatementsTrait;
	
	//----------------------------------------------------------------------------------------------------
	// Functions
	//----------------------------------------------------------------------------------------------------
	// 
	// abs()
	// mod()
	// ...
	//
	//----------------------------------------------------------------------------------------------------
	use DB\Traits\FunctionsTrait;

	//----------------------------------------------------------------------------------------------------
	// Select
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $select;
	
	//----------------------------------------------------------------------------------------------------
	// where
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	private $where;
	
	//----------------------------------------------------------------------------------------------------
	// All
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $all;
	
	//----------------------------------------------------------------------------------------------------
	// Distinct
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $distinct;
	
	//----------------------------------------------------------------------------------------------------
	// Max Statement Time
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $maxStatementTime;
	
	//----------------------------------------------------------------------------------------------------
	// Distinct Row
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $distinctRow;
	
	//----------------------------------------------------------------------------------------------------
	// High Priority
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $highPriority;
	
	//----------------------------------------------------------------------------------------------------
	// Low Priority
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $lowPriority;
	
	//----------------------------------------------------------------------------------------------------
	// Delayed
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $delayed;
	
	//----------------------------------------------------------------------------------------------------
	// Procedure
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $procedure;
	
	//----------------------------------------------------------------------------------------------------
	// Out File
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $outFile;
	
	//----------------------------------------------------------------------------------------------------
	// Dump File
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $dumpFile;
	
	//----------------------------------------------------------------------------------------------------
	// Character Set
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $characterSet;
	
	//----------------------------------------------------------------------------------------------------
	// Into
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $into;
	
	//----------------------------------------------------------------------------------------------------
	// For Update
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $forUpdate;
	
	//----------------------------------------------------------------------------------------------------
	// Lock In Share Mode
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $lockInShareMode;
	
	//----------------------------------------------------------------------------------------------------
	// Quick
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $quick;
	
	//----------------------------------------------------------------------------------------------------
	// Ignore
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $ignore;
	
	//----------------------------------------------------------------------------------------------------
	// Partition
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $partition;
	
	//----------------------------------------------------------------------------------------------------
	// Straight Join
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $straightJoin;
	
	//----------------------------------------------------------------------------------------------------
	// Small Result
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $smallResult;	
	
	//----------------------------------------------------------------------------------------------------
	// Big Result
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------	
	private $bigResult;
	
	//----------------------------------------------------------------------------------------------------
	// Buffer Result
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------		
	private $bufferResult;	
	
	//----------------------------------------------------------------------------------------------------
	// Cache
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------	
	private $cache;	
	
	//----------------------------------------------------------------------------------------------------
	// No Cache
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $noCache;
	
	//----------------------------------------------------------------------------------------------------
	// Calc Found Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------	
	private $calcFoundRows;	
	
	//----------------------------------------------------------------------------------------------------
	// Group By
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $groupBy;
	
	//----------------------------------------------------------------------------------------------------
	// Having
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	private $having;
	
	//----------------------------------------------------------------------------------------------------
	// Order By
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $orderBy;
	
	//----------------------------------------------------------------------------------------------------
	// Limit
	//----------------------------------------------------------------------------------------------------
	//
	// @var int
	//
	//----------------------------------------------------------------------------------------------------
	private $limit;
	
	//----------------------------------------------------------------------------------------------------
	// Joing
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $join;
	
	//----------------------------------------------------------------------------------------------------
	// Trans Start
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $transStart;
	
	//----------------------------------------------------------------------------------------------------
	// Trans Error
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $transError;	
	
	//----------------------------------------------------------------------------------------------------
	// Pagination
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	private $pagination = ['start' => 0, 'limit' => 0];
	
	//----------------------------------------------------------------------------------------------------
	// Unlimited Query
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $unlimitedQuery;
	
	//----------------------------------------------------------------------------------------------------
	// Duplicate Check
	//----------------------------------------------------------------------------------------------------
	//
	// @var string
	//
	//----------------------------------------------------------------------------------------------------
	private $duplicateCheck;
	
	//----------------------------------------------------------------------------------------------------
	// Select
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$condition
	//
	//----------------------------------------------------------------------------------------------------
	public function select(...$condition)
	{
		if( empty($condition[0]) )
		{
			$condition[0] = '*';
		}
		
		$condition = rtrim(implode(',', $condition), ',');
		
		$this->select = ' '.$condition.' ';
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Where
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed  $column
	// @param scalar $value
	// @param string $logical
	//
	//----------------------------------------------------------------------------------------------------
	public function where($column, String $value = NULL, String $logical = NULL)
	{
		$this->_wh($column, $value, $logical, __FUNCTION__);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Where Group
	//----------------------------------------------------------------------------------------------------
	//
	// @param array ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function whereGroup(...$args)
	{
		$this->where .= $this->_whereHavingGroup($args);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Having Group
	//----------------------------------------------------------------------------------------------------
	//
	// @param array ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function havingGroup(...$args)
	{
		$this->having .= $this->_whereHavingGroup($args);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Having
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed  $column
	// @param scalar $value
	// @param string $logical
	//
	//----------------------------------------------------------------------------------------------------
	public function having($column, String $value = NULL, String $logical = NULL)
	{
		$this->_wh($column, $value, $logical, __FUNCTION__);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $condition
	// @param string $type
	//
	//----------------------------------------------------------------------------------------------------
	public function join(String $table, String $condition, String $type = NULL)
	{
		$table = $this->prefix.$table;
		$type  = strtoupper($type);
		
		$this->join .= ' '.$type.' JOIN '.$table.' ON '.$condition.' ';
	
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Inner Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $column
	// @param string $otherColumn
	//
	//----------------------------------------------------------------------------------------------------
	public function innerJoin(String $table, String $otherColumn, String $operator = '=')
	{
		$this->_join($table, $otherColumn, $operator, 'INNER');
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Outer Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $column
	// @param string $otherColumn
	//
	//----------------------------------------------------------------------------------------------------
	public function outerJoin(String $table, String $otherColumn, String $operator = '=')
	{
		$this->_join($table, $otherColumn, $operator, 'OUTER');
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Left Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $column
	// @param string $otherColumn
	//
	//----------------------------------------------------------------------------------------------------
	public function leftJoin(String $table, String $otherColumn, String $operator = '=')
	{
		$this->_join($table, $otherColumn, $operator, 'LEFT');
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Right Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $column
	// @param string $otherColumn
	//
	//----------------------------------------------------------------------------------------------------
	public function rightJoin(String $table, String $otherColumn, String $operator = '=')
	{
		$this->_join($table, $otherColumn, $operator, 'RIGHT');
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Group By
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function groupBy(...$args)
	{ 
		$this->groupBy .= implode(',', $args).', ';	
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Order By
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed  $condition
	// @param string $type
	//
	//----------------------------------------------------------------------------------------------------
	public function orderBy($condition, String $type = NULL)
	{ 
		if( is_string($condition) ) 
		{
			$this->orderBy .= $condition.' '.$type.', ';  
		}
		else
		{
			if( ! empty($condition) ) foreach( $condition as $key => $val )
			{
				$this->orderBy .= $key.' '.$val.', ';	
			}	
		}
		
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Limit
	//----------------------------------------------------------------------------------------------------
	//
	// @param int $start
	// @param int $limit
	//
	//----------------------------------------------------------------------------------------------------
	public function limit($start = NULL, Int $limit = 0)
	{ 
		nullCoalesce($start, (int) \URI::segment(-1));

		if( ! empty($limit) ) 
		{
			$comma = ' , '; 
		}
		else 
		{
			$comma = '';
		}
		
		$this->pagination['start'] = (int) $start;
		$this->pagination['limit'] = $limit;
		
		$this->limit = ' LIMIT '.$start.( ! empty($limit) ? $comma.$limit.' ' : '' );
	
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Get
	//----------------------------------------------------------------------------------------------------
	//
	// Sorguyu tamamlamak iÃ§in kullanÄ±lÄ±r.
	//
	// @param  string $table  -> Tablo adÄ±.
	// @return string $return -> Sorgunun dÃ¶nÃ¼Å tÃ¼rÃ¼. object, string
	//
	//----------------------------------------------------------------------------------------------------
	public function get(String $table = NULL, String $return = 'object')
	{		
		$this->tableName = $table = $this->_p($table, 'table');
	
		if( ! empty($this->selectFunctions) )
		{
			$selectFunctions = rtrim(implode(',', $this->selectFunctions), ',');
			
			if( empty($this->select) )
			{
				$this->select = $selectFunctions;
			}
			else
			{
				$this->select .= ','.$selectFunctions;
			}
		}
		
		if( empty($this->select) )
		{
			$this->select = ' * ';	
		}
		
		// First Query Build	
	    $firstQueryBuilder  = 'SELECT '.
							  $this->all.
							  $this->distinct.
							  $this->distinctRow.
						 	  $this->highPriority.
							  $this->maxStatementTime.
							  $this->straightJoin.
							  $this->smallResult.
							  $this->bigResult.
							  $this->bufferResult.
							  $this->cache.
							  $this->noCache.
							  $this->calcFoundRows.					 
							  $this->select.
							  ' FROM '.
							  $table.' '.
							  $this->join.
							  $this->_where().
							  $this->_groupBy().
							  $this->_having().
							  $this->_orderBy();
		// Second Query Build
	    $secondQueryBuilder = $this->procedure.
					          $this->outFile.
							  $this->characterSet.
							  $this->dumpFile.
							  $this->into.
							  $this->forUpdate.
							  $this->lockInShareMode;
			
		// Limited
		$queryBuilder = $firstQueryBuilder.$this->limit.$secondQueryBuilder;
		
		// Unlimited
		$this->unlimitedQuery = $firstQueryBuilder.$secondQueryBuilder;
		
		// Clear Query
		$this->_resetSelectQuery();
		
		// Query Security
		$secureQueryBuilder = $this->_querySecurity($queryBuilder);
		
		if( $return === 'string' )
		{
			return $secureQueryBuilder;	
		}
		
		$this->db->query($secureQueryBuilder, $this->secure);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Duplicate Check
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $column
	// @param string $otherColumn
	//
	//----------------------------------------------------------------------------------------------------
	public function duplicateCheck(...$args)
	{
		$this->duplicateCheck = $args;
		
		if( empty($this->duplicateCheck) )
		{
			$this->duplicateCheck[0] = '*';
		}
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Escape String
	//----------------------------------------------------------------------------------------------------
	//
	// TÄ±rnak iÅaretlerinin baÅÄ±na \ iÅareti ekler.
	//
	// @param  string $data
	// @return string 
	//
	//----------------------------------------------------------------------------------------------------
	public function escapeString(String $data) : String
	{
		return $this->db->realEscapeString($data);	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Real Escape String
	//----------------------------------------------------------------------------------------------------
	//
	// TÄ±rnak iÅaretlerinin baÅÄ±na \ iÅareti ekler.
	//
	// @param  string $data
	// @return string 
	//
	//----------------------------------------------------------------------------------------------------
	public function realEscapeString(String $data) : String
	{
		return $this->db->realEscapeString($data);	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Get String
	//----------------------------------------------------------------------------------------------------
	//
	// Sorguyunun Ã§alÄ±ÅtÄ±rÄ±lmadan metinsel Ã§Ä±ktÄ±sÄ±nÄ± almak iÃ§in kullanÄ±lÄ±r.
	//
	// @param  string $table -> Tablo adÄ±.
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function getString(String $table) : String
	{
		return $this->get($table, 'string');	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Alias
	//----------------------------------------------------------------------------------------------------
	//
	// Veriye takma ad vermek iÃ§in kullanÄ±lÄ±r.
	//
	// @param  string $string   -> Metin.
	// @param  string $alias    -> Takma ad.
	// @param  bool   $brackets -> Parantezlerin olup olmayacaÄÄ±.
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function alias(String $string, String $alias, Bool $brackets = false) : String
	{
		if( $brackets === true)
		{
			$string = $this->brackets($string);
		}
		
		return $string.' AS '.$alias;	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Brackets
	//----------------------------------------------------------------------------------------------------
	//
	// Verinin baÅÄ±na ve sonuna parantez eklemek iÃ§in kullanÄ±lÄ±r.
	//
	// @param  string $string   -> Metin.
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function brackets(String $string) : String
	{
		return ' ( '.$string.' ) ';
	}

	//----------------------------------------------------------------------------------------------------
	// All
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function all()
	{ 
		$this->all = ' ALL '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Distinct
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function distinct()
	{ 
		$this->distinct = ' DISTINCT '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Max Statement Time
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function maxStatementTime(String $time)
	{ 
		$this->maxStatementTime = ' MAX_STATEMENT_TIME '.$time.' '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Distinct Row
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function distinctRow()
	{ 
		$this->distinctRow = ' DISTINCTROW '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Straight Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function straightJoin()
	{ 
		$this->straightJoin = ' STRAIGHT_JOIN '; 
		return $this; 
	}	
		
	//----------------------------------------------------------------------------------------------------
	// High Priority
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function highPriority()
	{ 
		$this->highPriority = ' HIGH_PRIORITY '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Low Priority
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function lowPriority()
	{ 
		$this->lowPriority = ' LOW_PRIORITY '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Quick
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function quick()
	{ 
		$this->quick = ' QUICK '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Delayed
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function delayed()
	{ 
		$this->delayed = ' DELAYED '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Ignore
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function ignore()
	{ 
		$this->ignore = ' IGNORE '; 
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Partition
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function partition(...$args)
	{ 
		$this->partition = $this->_math(__FUNCTION__, $args)->args;
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Procedure
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function procedure(...$args)
	{ 
		$this->procedure = $this->_math(__FUNCTION__, $args)->args;
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Out File
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function outFile(String $file)
	{ 
		$this->outFile = 'INTO OUTFILE '."'".$file."'".' ';
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Dump File
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $file
	//
	//----------------------------------------------------------------------------------------------------
	public function dumpFile(String $file)
	{ 
		$this->dumpFile = 'INTO DUMPFILE '."'".$file."'".' ';
		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Character Set
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $set
	// @param bool   $return
	//
	//----------------------------------------------------------------------------------------------------
	public function characterSet(String $set, Bool $return = false)
	{ 
		$string = 'CHARACTER SET '.$set.' ';
		
		if( $return === false )
		{
			$this->characterSet = $string;
			return $this; 
		}
		else
		{
			return $string;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Character Set
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $set
	//
	//----------------------------------------------------------------------------------------------------
	public function cset(String $set)
	{ 
		if( empty($set) )
		{
			$set = $this->config['charset'];
		}
		
		return $this->characterSet($set, true);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Collate
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $set
	//
	//----------------------------------------------------------------------------------------------------
	public function collate(String $set = NULL)
	{ 
		if( empty($set) )
		{
			$set = $this->config['collation'];
		}
		
		return 'COLLATE '.$set.' ';
	}
	
	
	//----------------------------------------------------------------------------------------------------
	// Encoding
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $charset
	// @param string $collate
	//
	//----------------------------------------------------------------------------------------------------
	public function encoding(String $charset = 'utf8', String $collate = 'utf8_general_ci') : String
	{ 
		$encoding  = $this->cset($charset);
		$encoding .= $this->collate($collate);
		
		return $encoding;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Into
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $varname1
	// @param string $varname2
	//
	//----------------------------------------------------------------------------------------------------
	public function into(String $varname1, String $varname2 = NULL)
	{ 
		$this->into = 'INTO '.$varname1.' ';
		
		if( ! empty($varname2) ) 
		{
			$this->into .= ', '.$varname2.' ';  
		}

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// For Update
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function forUpdate()
	{ 
		$this->forUpdate = ' FOR UPDATE ';

		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Lock In Share Mode
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function lockInShareMode()
	{ 
		$this->lockInShareMode = ' LOCK IN SHARE MODE '; 

		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Small Result
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function smallResult()
	{ 
		$this->smallResult = ' SQL_SMALL_RESULT '; 

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Big Result
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function bigResult()
	{ 
		$this->bigResult = ' SQL_BIG_RESULT '; 

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Buffer Result
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function bufferResult()
	{ 
		$this->bufferResult = ' SQL_BUFFER_RESULT '; 

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Cache
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function cache()
	{ 
		$this->cache = ' SQL_CACHE '; 

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// No Cache
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function noCache()
	{ 
		$this->noCache = ' SQL_NO_CACHE '; 

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Calc Found Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function calcFoundRows()
	{ 
		$this->calcFoundRows = ' SQL_CALC_FOUND_ROWS '; 

		return $this; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $secure
	//
	//----------------------------------------------------------------------------------------------------
	public function query(String $query, Array $secure = [])
	{
		$this->db->query($this->_querySecurity($query), $this->_p($secure, 'secure'));
		
		if( ! empty($this->transStart) ) 
		{
			$transError = $this->db->error();
			
			if( ! empty($transError) ) 
			{
				$this->transError = $transError; 
			}
		}
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Exec Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $secure
	//
	//----------------------------------------------------------------------------------------------------
	public function execQuery(String $query, Array $secure = [])
	{
		return $this->db->exec($this->_querySecurity($query), $this->_p($secure, 'secure'));
	}
	
	//----------------------------------------------------------------------------------------------------
	// Multi Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $secure
	//
	//----------------------------------------------------------------------------------------------------
	public function multiQuery(String $query, Array $secure = [])
	{
		return $this->db->multiQuery($this->_querySecurity($query), $this->_p($secure, 'secure'));
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Start
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transStart()
	{
		$this->transStart = $this->db->transStart();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans End
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transEnd()
	{
		if( ! empty($this->transError) )
		{
			$this->db->transRollback();
		}
		else
		{
			$this->db->transCommit();
		}
		
		$this->transStart = NULL;	
		$this->transError = NULL;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Insert ID
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function insertID()
	{ 
		return $this->db->insertId(); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Status
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	//
	//----------------------------------------------------------------------------------------------------
	public function status(String $table = NULL)
	{
		$table = "'".$this->_p($table)."'";

		$query = "SHOW TABLE STATUS FROM ".$this->config['database']." LIKE $table";
	
		$this->_runQuery($query);

		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Increment
	//----------------------------------------------------------------------------------------------------
	//
	// @param string  $table
	// @param mixed   $columns
	// @param numeric $increment
	//
	//----------------------------------------------------------------------------------------------------
	public function increment(String $table = NULL, $columns = [], Int $increment = 1)
	{
		return $this->_incdec($table, $columns, $increment, 'increment');
	}
	
	//----------------------------------------------------------------------------------------------------
	// Decrement
	//----------------------------------------------------------------------------------------------------
	//
	// @param string  $table
	// @param mixed   $columns
	// @param numeric $decrement
	//
	//----------------------------------------------------------------------------------------------------
	public function decrement(String $table = NULL, $columns = [], Int $decrement = 1)
	{
		return $this->_incdec($table, $columns, $decrement, 'decrement');
	}

	//----------------------------------------------------------------------------------------------------
	// Insert
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $table
	// @param mixed $datas
	//
	//----------------------------------------------------------------------------------------------------
	public function insert(String $table = NULL, Array $datas = [])
	{
		$datas = $this->_p($datas, 'column');	
		$data  = ""; $values = "";
		
		$duplicateCheckWhere = [];
		
		foreach( $datas as $key => $value )
		{
			$data .= $key.",";
			
			if( ! empty($this->duplicateCheck) )
			{
				if( $this->duplicateCheck[0] !== '*' )
				{
					if( in_array($key, $this->duplicateCheck) )	
					{
						$duplicateCheckWhere[] = [$key.' = ', $value, 'and'];	
					}
				}
				else
				{
					$duplicateCheckWhere[] = [$key.' = ', $value, 'and'];	
				}
			
			}
					
			$value = $this->nailEncode($value);
			
			if( $value !== '?' )
			{
				$values .= "'".$value."'".",";
			}
			else
			{
				$values .= $value.",";
			}
		}
		
		if( ! empty($duplicateCheckWhere) )
		{
			$duplicateCheckColumn = $this->duplicateCheck; 
			
			if( $this->where($duplicateCheckWhere)->get($table)->totalRows() )
			{
				$this->duplicateCheck = NULL;
				return \Exceptions::throws('Database', 'duplicateCheckError', implode(',', $duplicateCheckColumn));	
			}
		}
			
		$insertQuery = 'INSERT '.
					    $this->lowPriority.
						$this->delayed.
						$this->highPriority.
						$this->ignore.
					    ' INTO '.
		                $this->_p($table).
						$this->partition.
		               ' ('.substr($data, 0, -1).') VALUES ('.substr($values, 0, -1).')';

		$this->_resetInsertQuery();

		return $this->_runQuery($insertQuery);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Updated
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $table
	// @param mixed $set
	//
	//----------------------------------------------------------------------------------------------------
	public function update(String $table = NULL, Array $set = [])
	{
		$set  = $this->_p($set, 'column');
		$data = '';
		
		foreach( $set as $key => $value )
		{
			$value = $this->nailEncode($value);
			
			$data .= $key.'='."'".$value."'".',';
		}
		
		$set = ' SET '.substr($data,0,-1);
	
		$updateQuery = 'UPDATE '.
					    $this->lowPriority.
					    $this->ignore.
		                $this->_p($table).
						$set.
						$this->_where().
						$this->_orderBy().
						$this->limit;
		
		$this->_resetUpdateQuery();
		
		return $this->_runQuery($updateQuery);	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Delete
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $table
	//
	//----------------------------------------------------------------------------------------------------
	public function delete(String $table = NULL)
	{	
		$deleteQuery = 'DELETE '.
		               $this->lowPriority.
					   $this->quick.
					   $this->ignore.
					   ' FROM '.
					   $this->_p($table).
					   $this->partition.
					   $this->_where().
					   $this->_orderBy().
					   $this->limit;
	
		$this->_resetDeleteQuery();
		
		return $this->_runQuery($deleteQuery);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Total Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param bool $total
	//
	//----------------------------------------------------------------------------------------------------
	public function totalRows(Bool $total = false)
	{
		if( $total === false )
		{
			return $this->db->numRows(); 
		}
		else
		{	
			$query = $this->query($this->_querySecurity($this->unlimitedQuery), $this->secure)->totalRows();
			
			$this->unlimitedQuery = NULL;
			
			return $query;
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Total Columns
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function totalColumns()
	{
		return $this->db->numFields(); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Columns
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function columns()
	{ 
		return $this->db->columns(); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Result
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $type: object, 'json', 'array'
	//
	//----------------------------------------------------------------------------------------------------
	public function result(String $type = 'object')
	{ 
		if( $type === 'object' )
		{
			return $this->db->result();
		}
		elseif( $type === 'json' )
		{
			return json_encode($this->db->result());	
		}
		else
		{
			return $this->db->resultArray();
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Result Json
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function resultJson()
	{ 
		return json_encode($this->db->result());	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Result Array
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function resultArray()
	{ 
		return $this->db->resultArray(); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Array
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchArray()
	{ 
		return $this->db->fetchArray(); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Assoc
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchAssoc()
	{ 
		return $this->db->fetchAssoc(); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $type: assoc, array, row
	//
	//----------------------------------------------------------------------------------------------------
	public function fetch(String $type = 'assoc')
	{ 
		if( $type === 'assoc' )
		{
			return $this->db->fetchAssoc(); 
		}
		elseif( $type === 'array')
		{
			return $this->db->fetchArray(); 
		}
		else
		{
			return $this->db->fetchRow();
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Row
	//----------------------------------------------------------------------------------------------------
	//
	// @param boolean $printable
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchRow(Bool $printable = false)
	{ 
		$row = $this->db->fetchRow();

		if( $printable === false )
		{
			return $row; 
		}
		else
		{
			return current($row);	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Row
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $printable
	//
	//----------------------------------------------------------------------------------------------------
	public function row($printable = false)
	{ 
		if( is_numeric($printable) )
		{
			$result = $this->db->resultArray(); 
			
			if( $printable < 0 )
			{
				return isset( $result[count($result) + $printable] )
					   ? (object) $result[count($result) + $printable]
					   : false;
			}
			else
			{
				return isset( $result[$printable] )
				       ? (object) $result[$printable]
					   : false;
			}
		}
		elseif( $printable === true )
		{
			return current((array)$this->db->row());	
		}
		else
		{
			return $this->db->row();	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Value
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function value()
	{ 
		return current((array) $this->db->row());
	}
	
	//----------------------------------------------------------------------------------------------------
	// Affected Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function affectedRows()
	{ 
		return $this->db->affectedRows();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Column Data
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $column
	//
	//----------------------------------------------------------------------------------------------------
	public function columnData(String $column = NULL)
	{ 
		return $this->db->columnData($column); 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Table Name
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function tableName()
	{ 
		return $this->tableName; 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Pagination
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $url
	// @param array  $settigs
	// @param bool   $output
	//
	//----------------------------------------------------------------------------------------------------
	public function pagination(String $url = NULL, Array $settings = [], Bool $output = true)
	{ 
		$limit = $this->pagination['limit'];
		$start = $this->pagination['start'];
		
		$settings['totalRows'] = $this->totalRows(true);
		$settings['limit']     = isset($limit) ? $limit : 10;
		$settings['start']     = isset($start) ? $start : NULL;
		
		if( ! empty($url) )
		{
			$settings['url'] = $url;	
		}
		
		$return = $output === true
		        ? \Pagination::create(NULL, $settings) 
				: $settings;
		
		$this->pagination = ['start' => 0, 'limit' => 0];
		
		return $return;
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Where Having
	//----------------------------------------------------------------------------------------------------
	protected function _whereHaving($column, $value, $logical)
	{
		if( $value !== '' )
		{
			$value = presuffix($this->db->realEscapeString($value), "'");
		}
		
		if( preg_match('/^\w+$/', trim($column)) )
		{
			$column .= ' = ';	
		}
		
		return ' '.$column.' '.$value.' '.$logical.' ';
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Where Having
	//----------------------------------------------------------------------------------------------------
	protected function _wh($column, $value, $logical, $type = 'where')
	{
		if( isArray($column) )
		{
			$columns = func_get_args();
			
			if( isset($columns[0][0]) && is_array($columns[0][0]) )
			{
				$columns = $columns[0];	
			}
			
			foreach( $columns as $col )
			{
				if( is_array($col) )
				{
					$c = isset($col[0]) ? $col[0] : '';
					$v = isset($col[1]) ? $col[1] : '';
					$l = isset($col[2]) ? $col[2] : '';
				
					$this->$type .= $this->_whereHaving($c, $v, $l);	
				}
			}
		}
		else
		{
			$this->$type .= $this->_whereHaving($column, $value, $logical);
		}
		
		return $this;
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Where Having Group
	//----------------------------------------------------------------------------------------------------
	protected function _whereHavingGroup($conditions = [])
	{
		$con = [];
		
		if( isset($conditions[0][0]) && is_array($conditions[0][0]) )
		{
			$con         = \Arrays::getLast($conditions);
			$conditions  = $conditions[0];	
		}
		
		$getLast = \Arrays::getLast($conditions);
			
		if( is_string($con) )
		{
			$conjunction = $con;	
		}
		else
		{
			if( is_string($getLast) )
			{
				$conjunction = $getLast;
				$conditions  = \Arrays::removeLast($conditions);
			}
			else
			{
				$conjunction = '';	
			}
		}
				
		$whereGroup = '';
		
		if( is_array($conditions) ) foreach( $conditions as $column )
		{
			$col     = isset( $column[0] ) ? $column[0] : '';
			$value   = isset( $column[1] ) ? $column[1] : '';
			$logical = isset( $column[2] ) ? $column[2] : '';
			
			$whereGroup .= $this->_whereHaving($col, $value, $logical);
		}
		
		return ' ( '.$this->_whereHavingConjuctionClean($whereGroup).' ) '.$conjunction.' ';
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Where Having Conjuction Control
	//----------------------------------------------------------------------------------------------------
	protected function _whereHavingConjuctionControl($type)
	{
		if( ! empty($this->$type) )
		{
			$trim  = trim($this->$type);
			$lower = strtolower($trim);
			
			switch( substr($lower, -3) )
			{
				case 'and' :
				case 'xor' :
				case 'not' :
				$this->$type = substr($trim, 0, -3);		
			}
			
			switch( substr($lower, -2) )
			{
				case 'or' :
				case '||' :
				case '&&' :
				$this->$type = substr($trim, 0, -2);
			}
			
			switch( substr($lower, -1) )
			{
				case '!' :
				$this->$type = substr($trim, 0, -1);
			}		
				
			$return = ' '.strtoupper($type).' '.$this->$type; 
			
			$this->$type = NULL;
			
			return $return;
		}	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Where Having Conjuction Clean
	//----------------------------------------------------------------------------------------------------
	protected function _whereHavingConjuctionClean($str)
	{
		if( ! empty($str) )
		{
			$str = strtolower(trim($str));
			
			switch( substr($str, -3) )
			{
				case 'and' :
				case 'xor' :
				case 'not' :
				return substr($str, 0, -3);		
			}
			
			switch( substr($str, -2) )
			{
				case 'or' :
				case '||' :
				case '&&' :
				return substr($str, 0, -2);
			}
			
			switch( substr($str, -1) )
			{
				case '!' :
				return substr($str, 0, -1);
			}		
		}	
		
		return $str;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Where
	//----------------------------------------------------------------------------------------------------
	protected function _where()
	{
		return $this->_whereHavingConjuctionControl('where');
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Having
	//----------------------------------------------------------------------------------------------------
	protected function _having()
	{
		return $this->_whereHavingConjuctionControl('having');
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table
	// @param string $column
	// @param string $otherColumn
	// @param string $operator
	// @param string $type
	//
	//----------------------------------------------------------------------------------------------------
	protected function _join($tableAndColumn = '', $otherColumn = '', $operator = '=', $type = 'INNER')
	{
		$tableAndColumn = explode('.', $tableAndColumn);
		
		$table     = isset($tableAndColumn[0]) ? $this->prefix.$tableAndColumn[0] : '';
		$column    = isset($tableAndColumn[1]) ? $this->prefix.$tableAndColumn[1] : '';	
		$condition = $table.'.'.$column.' '.$operator.' '.$this->prefix.$otherColumn.' ';
		
		$this->join($table, $condition, $type);
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Group By
	//----------------------------------------------------------------------------------------------------
	//
	// @param  void
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	protected function _groupBy()
	{
		if( ! empty($this->groupBy) )
		{
			return ' GROUP BY '.rtrim($this->groupBy, ', ');	
		}
		
		return false;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Order By
	//----------------------------------------------------------------------------------------------------
	//
	// @param  void
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	protected function _orderBy()
	{
		if( ! empty($this->orderBy) )
		{
			return ' ORDER BY '.rtrim($this->orderBy, ', ');	
		}
		
		return false;
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Increment & Decrement
	//----------------------------------------------------------------------------------------------------
	protected function _incdec($table, $columns, $incdec, $type)
	{
		$table   = $this->_p($table);
		$columns = $this->_p($columns, 'column');
		$incdec  = $type === 'increment' ? abs($incdec) : -abs($incdec);
		
		if( is_array($columns) ) foreach( $columns as $v )
		{
			$newColumns[$v] = "$v + $incdec";	
		}
		else
		{
			$newColumns = [$columns => "$columns + $incdec"];	
		}

		if( ! empty($this->where) ) 
		{
			$where = ' WHERE '; 
		}
		else 
		{
			$where = '';
		}
		
		$data = '';
		
		foreach( $newColumns as $key => $value )
		{
			$data .= $key.'='.$value.',';
		}
		
		$set = ' SET '.substr($data,0,-1);
		
		$updateQuery = 'UPDATE '.$this->prefix.$table.$set.$where.$this->where;
		
		$this->where = NULL;

		return $this->db->query($updateQuery);
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Select Reset Query
	//----------------------------------------------------------------------------------------------------
	protected function _resetSelectQuery()
	{
		$this->all 			   = NULL;
		$this->distinct 	   = NULL;
		$this->distinctRow 	   = NULL;
		$this->highPriority    = NULL;
		$this->straightJoin    = NULL;
		$this->smallResult 	   = NULL;
		$this->bigResult 	   = NULL;
		$this->bufferResult    = NULL;
		$this->cache 		   = NULL;
		$this->noCache 		   = NULL;
		$this->calcFoundRows   = NULL;
		$this->select 		   = NULL;
		$this->from 		   = NULL;
		$this->table 	 	   = NULL;
		$this->where 		   = NULL;
		$this->groupBy 		   = NULL;
		$this->having 		   = NULL;
		$this->orderBy 		   = NULL;
		$this->limit 		   = NULL;
		$this->join 		   = NULL;
		$this->selectFunctions = NULL;
		$this->table 		   = NULL;
		$this->procedure	   = NULL;
		$this->outFile         = NULL;
		$this->dumpFile		   = NULL;
		$this->characterSet	   = NULL;
		$this->into			   = NULL;
		$this->forUpdate	   = NULL;
		$this->lockInShareMode = NULL;
		$this->maxStatementTime= NULL;
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Reset Insert Query
	//----------------------------------------------------------------------------------------------------
	protected function _resetInsertQuery()
	{
		$this->column 		   = NULL;
		$this->table 		   = NULL;
		$this->highPriority    = NULL;
		$this->lowPriority     = NULL;
		$this->partition       = NULL;
		$this->ignore     	   = NULL;
		$this->delayed		   = NULL;
		$this->duplicateCheck  = NULL;
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Reset Update Query
	//----------------------------------------------------------------------------------------------------
	protected function _resetUpdateQuery()
	{
		$this->where 		   = NULL;
		$this->lowPriority     = NULL;
		$this->ignore     	   = NULL;
		$this->orderBy 		   = NULL;
		$this->limit 		   = NULL;
		$this->table 		   = NULL;
		$this->column 		   = NULL;
	}

	//----------------------------------------------------------------------------------------------------
	// Protected Reset Delete Query
	//----------------------------------------------------------------------------------------------------
	protected function _resetDeleteQuery()
	{
		$this->where 		   = NULL;
		$this->lowPriority     = NULL;
		$this->quick     	   = NULL;
		$this->ignore     	   = NULL;
		$this->partition       = NULL;
		$this->orderBy 		   = NULL;
		$this->limit 		   = NULL;
		$this->table 		   = NULL;
	}
}