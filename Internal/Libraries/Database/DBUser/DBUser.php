<?php
namespace ZN\Database;

class InternalDBUser extends DatabaseCommon implements DBUserInterface
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif Hakkı: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// User
	//----------------------------------------------------------------------------------------------------
	// 
	// @var object
	//
	//----------------------------------------------------------------------------------------------------
	protected $user;

	//----------------------------------------------------------------------------------------------------
	// Database Manipulation Methods Başlangıç
	//----------------------------------------------------------------------------------------------------
	
	public function __construct()
	{
		parent::__construct();

		$this->user = $this->_drvlib($this->config['driver'], 'User');
	}

	
	//----------------------------------------------------------------------------------------------------
	// name()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $name: USER()
	//
	//----------------------------------------------------------------------------------------------------
	public function name(String $name)
	{
		$this->user->name($name);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// host()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host: localhost
	//
	//----------------------------------------------------------------------------------------------------
	public function host(String $host)
	{
		$this->user->host($host);	
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// password()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function password(String $authString)
	{
		$this->user->password($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// groups()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function groups(String $authString)
	{
		$this->user->groups($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// members()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function members(String $authString)
	{
		$this->user->members($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// schema()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function schema(String $authString)
	{
		$this->user->schema($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// identifiedBy()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function identifiedBy(String $authString)
	{
		$this->user->identifiedBy($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// identifiedByPassword()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $hashString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function identifiedByPassword(String $hashString)
	{
		$this->user->identifiedByPassword($hashString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// identifiedWith()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authPlugin: empty
	// @param string $type      : empty
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function identifiedWith(String $authPlugin, String $type, String $authString)
	{
		$this->user->identifiedWith($authPlugin, $type, $authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// identifiedWithBy()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authPlugin: empty
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function identifiedWithBy(String $authPlugin, String $authString)
	{
		$this->user->identifiedWithBy($authPlugin, $authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// identifiedWithAs()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $hashPlugin: empty
	// @param string $hashString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function identifiedWithAs(String $hashPlugin, String $hashString)
	{
		$this->user->identifiedWithAs($hashPlugin, $hashString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// required()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function required()
	{
		$this->user->required();
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// with()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function with()
	{
		$this->user->with();
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// option()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $name
	// @param string $value
	//
	//----------------------------------------------------------------------------------------------------
	public function option(String $name, String $value)
	{
		$this->user->option($name, $value);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// encode()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $type     : SSL, X509, CIPHER value, ISSUER value, SUBJECT value 
	// @param string $string   : empty value
	// @param string $condition: and, or
	//
	//----------------------------------------------------------------------------------------------------
	public function encode(String $type, String $string, String $condition = NULL)
	{
		$this->user->encode($type, $string, $condition);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// resource()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $resource: query       => MAX_QUERIES_PER_HOUR
	//						    update 		=> 'MAX_UPDATES_PER_HOUR
	//						    connection 	=> 'MAX_CONNECTIONS_PER_HOUR
	//						    user 		=> 'MAX_USER_CONNECTIONS
	// @param string $count   : 0
	//
	//----------------------------------------------------------------------------------------------------
	public function resource(String $resource, $count = 0)
	{
		$this->user->resource($resource, $count);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// passwordExpire()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $type: empty, DEFAULT, NEVER, INTERVAL
	// @param numeric $n   : 0
	//
	//----------------------------------------------------------------------------------------------------
	public function passwordExpire(String $type = NULL, $n = 0)
	{
		$this->user->passwordExpire($type, $n);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// lock()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $type: lock, unlock
	//
	//----------------------------------------------------------------------------------------------------
	public function lock(String $type = NULL)
	{
		nullCoalesce($type, 'lock');

		$this->user->lock($type);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// unlock()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $type: unlock, lock
	//
	//----------------------------------------------------------------------------------------------------
	public function unlock(String $type = NULL)
	{
		nullCoalesce($type, 'unlock');

		$this->user->unlock($type);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// type()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $type: TABLE, FUNCTION, PROCEDURE
	//
	//----------------------------------------------------------------------------------------------------
	public function type(String $type = NULL)
	{
		nullCoalesce($type, 'TABLE');

		$this->user->type($type);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// select()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $select: *.*
	//
	//----------------------------------------------------------------------------------------------------
	public function select(String $select = NULL)
	{
		nullCoalesce($select, '*.*');

		$this->user->select($select);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// grantOption()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void()
	//
	//----------------------------------------------------------------------------------------------------
	public function grantOption()
	{
		$this->user->grantOption();
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// firstName()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function firstName(String $authString)
	{
		$this->user->firstName($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// middleName()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function middleName(String $authString)
	{
		$this->user->middleName($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// lastName()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function lastName(String $authString)
	{
		$this->user->lastName($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// adminRole()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $authString: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function adminRole(String $authString = NULL)
	{
		nullCoalesce($authString, 'GRANT');

		$this->user->adminRole($authString);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// alter()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $name: USER()
	//
	//----------------------------------------------------------------------------------------------------
	public function alter(String $name = NULL, $schema = NULL)
	{
		nullCoalesce($name, 'USER()');

		$query = $this->user->alter($name, $schema);

		return $this->_runQuery($query);
	}

	//----------------------------------------------------------------------------------------------------
	// create()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $name: USER()
	//
	//----------------------------------------------------------------------------------------------------
	public function create(String $name = NULL, $schema = NULL)
	{
		nullCoalesce($name, 'USER()');

		$query = $this->user->create($name, $schema);

		return $this->_runQuery($query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// drop()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $name: USER()
	//
	//----------------------------------------------------------------------------------------------------
	public function drop(String $name = NULL, $type = NULL)
	{
		nullCoalesce($name, 'USER()');

		$query = $this->user->drop($name, $type);

		return $this->_runQuery($query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// grant()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $name  : ALL
	// @param string  $type  : *.*
	// @param string  $select: *.*
	//
	//----------------------------------------------------------------------------------------------------
	public function grant(String $name = NULL, String $type = NULL, String $select = NULL)
	{
		nullCoalesce($name,   'ALL');
		nullCoalesce($select, '*.*');

		$query = $this->user->grant($name, $type, $select);
;
		return $this->_runQuery($query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// revoke()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $name  : ALL
	// @param string  $type  : *.*
	// @param string  $select: *.*
	//
	//----------------------------------------------------------------------------------------------------
	public function revoke(String $name = NULL, String $type = NULL, String $select = NULL)
	{
		nullCoalesce($name,   'ALL');
		nullCoalesce($select, '*.*');

		$query = $this->user->revoke($name, $schema);

		return $this->_runQuery($query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// rename()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $oldName: empty
	// @param string  $newName: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function rename(String $oldName, String $newName)
	{
		$query = $this->user->rename($oldName, $newName);

		return $this->_runQuery($query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// setPassword()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string  $user: empty
	// @param string  $pass: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function setPassword(String $user = NULL, String $pass = NULL)
	{
		$query = $this->user->setPassword($user, $pass);

		return $this->_runQuery($query);
	}
}