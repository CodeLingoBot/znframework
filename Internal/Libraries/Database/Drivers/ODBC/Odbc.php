<?php
namespace ZN\Database\Drivers;

use ZN\Database\Abstracts\DriverConnectionMappingAbstract;

class ODBCDriver extends DriverConnectionMappingAbstract
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// Operators
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $operators =
	[
		'like' => '*'
	];
	
	//----------------------------------------------------------------------------------------------------
	// Statements
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $statements =
	[
		'autoIncrement' => 'AUTOINCREMENT',
		'primaryKey'	=> 'PRIMARY KEY',
		'foreignKey'	=> 'FOREIGN KEY',
		'unique'		=> 'UNIQUE',
		'null'			=> 'NULL',
		'notNull'		=> 'NOT NULL',
		'constraint'	=> 'CONSTRAINT',
		'default'		=> 'DEFAULT'
	];
	
	//----------------------------------------------------------------------------------------------------
	// Variable Types
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $variableTypes =
	[
		'int' 			=> 'INTEGER',
		'smallInt'		=> 'SMALLINT',
		'tinyInt'		=> 'TINYINT',
		'mediumInt'		=> 'INTEGER',
		'bigInt'		=> 'BIGINT',
		'decimal'		=> 'DECIMAL',
		'double'		=> 'DOUBLE PRECISION',
		'float'			=> 'FLOAT',
		'char'			=> 'CHAR',
		'varChar'		=> 'VARCHAR',
		'tinyText'		=> 'VARCHAR(255)',
		'text'			=> 'VARCHAR(65535)',
		'mediumText'	=> 'VARCHAR(16277215)',
		'longText'		=> 'VARCHAR(16277215)',
		'date'			=> 'DATE',
		'dateTime'		=> 'UTCDATETIME',
		'time'			=> 'TIME',
		'timeStamp'		=> 'TIMESTAMP'
	];
	
	//----------------------------------------------------------------------------------------------------
	// Construct
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function __construct()
	{
		\Support::func('odbc_connect', 'Microsoft Access(ODBC)');	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Connect
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $config
	//
	//----------------------------------------------------------------------------------------------------
	public function connect($config = [])
	{	
		$this->config = $config;
		
		$dsn = 	( ! empty($this->config['dsn']) )
				? $this->config['dsn']
				: 'DRIVER='.$this->config['host'].';SERVER='.$this->config['server'].';DATABASE='.$this->config['database'];
				
		
		$this->connect = 	( $this->config['pconnect'] === true )
							? @odbc_pconnect($dsn , $this->config['user'], $this->config['password'])
							: @odbc_connect($dsn , $this->config['user'], $this->config['password']);
		
		if( empty($this->connect) ) 
		{
			die(getErrorMessage('Database', 'mysqlConnectError'));
		}
	}

	//----------------------------------------------------------------------------------------------------
	// Exec
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $security
	//
	//----------------------------------------------------------------------------------------------------
	public function exec($query, $security = NULL)
	{
		return odbc_exec($this->connect, $query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Multi Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $security
	//
	//----------------------------------------------------------------------------------------------------
	public function multiQuery($query, $security = NULL)
	{
		return $this->query($query, $security);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $security
	//
	//----------------------------------------------------------------------------------------------------
	public function query($query, $security = [])
	{
		$this->query = odbc_prepare($this->connect, $query);
		return odbc_execute($this->query, $security);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Start
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transStart()
	{
		return odbc_autocommit($this->connect, false);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Roll Back
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transRollback()
	{
		$rollback = odbc_rollback($this->connect);
		odbc_autocommit($this->connect, true);
		return $rollback;	 
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Commit
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transCommit()
	{
		$commit = odbc_commit($this->connect);
		odbc_autocommit($this->connect, true);
		return $commit;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Column Data
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $column
	//
	//----------------------------------------------------------------------------------------------------
	public function columnData($col = '')
	{
		if( empty($this->query) ) 
		{
			return false;
		}
		
		$columns = [];
		
		$count = $this->numFields();

		for ($i = 0, $index = 1; $i < $count; $i++, $index++)
		{
			$fieldName = odbc_field_name($this->query, $index);
			
			$columns[$fieldName]				= new \stdClass();
			$columns[$fieldName]->name			= $fieldName;
			$columns[$fieldName]->type			= odbc_field_type($this->query, $index);
			$columns[$fieldName]->maxLength		= odbc_field_len($this->query, $index);
			$columns[$fieldName]->primaryKey	= NULL;
			$columns[$fieldName]->default		= NULL;
		}
		
		if( isset($columns[$col]) )
		{
			return $columns[$col];
		}
		
		return $columns;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Num Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function numRows()
	{
		if( ! empty($this->query) )
		{
			return odbc_num_rows($this->query);
		}
		else
		{
			return 0;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Columns
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function columns()
	{
		if( empty($this->query) ) 
		{
			return false;
		}
		
		$columns = [];
		$num_fields = $this->numFields();
		
		for($i=0; $i < $num_fields; $i++)
		{		
			$columns[] = odbc_field_name($this->query, $i);
		}
		
		return $columns;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Num Fields
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function numFields()
	{
		if( ! empty($this->query) )
		{
			return odbc_num_fields($this->query);
		}
		else
		{
			return 0;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Real Escape String
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $data
	//
	//----------------------------------------------------------------------------------------------------
	public function realEscapeString($data = '')
	{
		return \Security::escapeStringEncode($data);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Error
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function error()
	{
		if( ! empty($this->connect) )
		{
			return odbc_error($this->connect);
		}
		else
		{
			return false;
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Array
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchArray()
	{
		if( ! empty($this->query) )
		{
			return odbc_fetch_array($this->query);
		}
		else
		{
			return false;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Assoc
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchAssoc()
	{
		if( ! empty($this->query) )
		{
			return odbc_fetch_array($this->query);
		}
		else
		{
			return false;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Row
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchRow()
	{
		if( ! empty($this->query) )
		{
			return odbc_fetch_row($this->query);
		}
		else
		{
			return 0;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Affected Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function affectedRows()
	{
		if( ! empty($this->connect) )
		{
			return false;
		}
		else
		{
			return false;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Close
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function close()
	{
		if( ! empty($this->connect) ) 
		{
			@odbc_close($this->connect);
		}
	}	
	
	//----------------------------------------------------------------------------------------------------
	// Version
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function version()
	{
		// Desteklenmiyor.
		if( ! empty($this->connect) ) 
		{
			return false;
		}
	}	
}