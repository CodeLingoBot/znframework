<?php
namespace ZN\Database\Drivers;

use ZN\Database\Abstracts\DriverAbstract;

class SQLiteDriver extends DriverAbstract
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// Operators
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $operators =
	[
		'like' => '%'
	];
	
	//----------------------------------------------------------------------------------------------------
	// Statements
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $statements =
	[
		'autoIncrement' => 'AUTOINCREMENT',
		'primaryKey'	=> 'PRIMARY KEY',
		'foreignKey'	=> 'FOREIGN KEY',
		'unique'		=> 'UNIQUE',
		'null'			=> 'NULL',
		'notNull'		=> 'NOT NULL',
		'constraint'	=> 'CONSTRAINT',
		'default'		=> 'DEFAULT'
	];
	
	//----------------------------------------------------------------------------------------------------
	// Variable Types
	//----------------------------------------------------------------------------------------------------
	//
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $variableTypes =
	[
		'int' 			=> 'INTEGER',
		'smallInt'		=> 'SMALLINT',
		'tinyInt'		=> 'TINYINT',
		'mediumInt'		=> 'MEDIUMINT',
		'bigInt'		=> 'BIGINT',
		'decimal'		=> 'DECIMAL',
		'double'		=> 'DOUBLE',
		'float'			=> 'FLOAT',
		'char'			=> 'CHARACTER',
		'varChar'		=> 'VARCHAR',
		'tinyText'		=> 'VARCHAR(255)',
		'text'			=> 'TEXT',
		'mediumText'	=> 'CLOB',
		'longText'		=> 'BLOB',
		'date'			=> 'DATE',
		'dateTime'		=> 'DATETIME',
		'time'			=> 'DATE',
		'timeStamp'		=> 'DATETIME'
	];
	
	//----------------------------------------------------------------------------------------------------
	// Construct
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function __construct()
	{
		\Support::func('sqlite_open', 'SQLite');	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Connect
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $config
	//
	//----------------------------------------------------------------------------------------------------
	public function connect($config = [])
	{
		$this->config = $config;
		$this->connect = 	( $this->config['pconnect'] === true )
							? @sqlite_popen($this->config['database'], 0666, $error)
							: @sqlite_open($this->config['database'], 0666, $error);
		
		
		if( ! empty($error) ) 
		{
			die(getErrorMessage('Database', 'mysqlConnectError'));
		}
	}

	//----------------------------------------------------------------------------------------------------
	// Exec
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $security
	//
	//----------------------------------------------------------------------------------------------------
	public function exec($query, $security = NULL)
	{
		return sqlite_exec($this->connect, $query);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Multi Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $security
	//
	//----------------------------------------------------------------------------------------------------
	public function multiQuery($query, $security = NULL)
	{
		return $this->query($query, $security);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Query
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $query
	// @param array  $security
	//
	//----------------------------------------------------------------------------------------------------
	public function query($query, $security = [])
	{
		$this->query = sqlite_query($this->connect, $query);
		return $this->query;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Start
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transStart()
	{
		$this->query('BEGIN TRANSACTION');
		return true;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Roll Back
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transRollback()
	{
		$this->query('ROLLBACK');
		return true;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Trans Commit
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function transCommit()
	{
		$this->query('COMMIT');
		return true;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Insert ID
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function insertID()
	{
		if( ! empty($this->connect) )
		{
			return sqlite_last_insert_rowid($this->connect);
		}
		else
		{
			return false;
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Column Data
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $column
	//
	//----------------------------------------------------------------------------------------------------
	public function columnData($col = '')
	{
		if( empty($this->query) ) 
		{
			return false;
		}
		
		$columns = [];
		$count   = $this->numFields();

		for( $i = 0; $i < $count; $i++ )
		{
			$fieldName = sqlite_field_name($this->query, $i);
			
			$columns[$fieldName]				= new \stdClass();
			$columns[$fieldName]->name			= $fieldName;
			$columns[$fieldName]->type		 	= NULL;
			$columns[$fieldName]->maxLength		= NULL;
			$columns[$fieldName]->primaryKey	= NULL;
			$columns[$fieldName]->default		= NULL;
		}
		
		if( isset($columns[$col]) )
		{
			return $columns[$col];
		}
		
		return $columns;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Num Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function numRows()
	{
		if( ! empty($this->query) )
		{
			return sqlite_num_rows($this->query);
		}
		else
		{
			return 0;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Columns
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function columns()
	{
		if( empty($this->query) ) 
		{
			return false;
		}
		
		$columns = [];
		$num_fields = $this->numFields();
		
		for($i=0; $i < $num_fields; $i++)
		{		
			$columns[] = sqlite_field_name($this->query, $i);
		}
		
		return $columns;
	}

	//----------------------------------------------------------------------------------------------------
	// Num Fields
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function numFields()
	{
		if( ! empty($this->query) )
		{
			return sqlite_num_fields($this->query);
		}
		else
		{
			return 0;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Real Escape String
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $data
	//
	//----------------------------------------------------------------------------------------------------
	public function realEscapeString($data)
	{
		if( empty($this->connect) ) 
		{
			return false;
		}
		
		return sqlite_escape_string($data);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Error
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function error()
	{
		if( ! empty($this->connect))
		{
			$code = sqlite_last_error($this->connect);
			return sqlite_error_string($code);
		}
		else
		{
			return false;
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Array
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchArray()
	{
		if( ! empty($this->query) )
		{
			return sqlite_fetch_array($this->query);
		}
		else
		{
			return false;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Assoc
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchAssoc()
	{
		if( ! empty($this->query) )
		{
			return sqlite_fetch_array($this->query);
		}
		else
		{
			return false;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Fetch Row
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function fetchRow()
	{
		if( ! empty($this->query) )
		{
			return sqlite_fetch_single($this->query);
		}
		else
		{
			return 0;	
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Affected Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function affectedRows()
	{
		// Ãn tanÄ±mlÄ± sorgu kullanÄ±yor.
		if( ! empty($this->connect) )
		{
			return false;
		}
		
		return false;	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Close
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function close()
	{
		if( ! empty($this->connect) ) 
		{
			@sqlite_close($this->connect); 
		}
		else 
		{
			return false;
		}
	}	
	
	//----------------------------------------------------------------------------------------------------
	// Version
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function version()
	{
		if( ! empty($this->connect) ) 
		{
			return sqlite_libversion(); 
		}
		else 
		{
			return false;
		}
	}
}