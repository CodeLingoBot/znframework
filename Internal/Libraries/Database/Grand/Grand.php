<?php
namespace ZN\Database;

class Grand extends \Model implements GrandInterface
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Call Undefined Method                                                                       
	//----------------------------------------------------------------------------------------------------
	//
	// __call()
	//																						  
	//----------------------------------------------------------------------------------------------------
	use \CallUndefinedMethodTrait;
	
	//----------------------------------------------------------------------------------------------------
	// Variable Grand Table
	//----------------------------------------------------------------------------------------------------
	//
	// @var string: empty
	//
	//----------------------------------------------------------------------------------------------------
	protected $grandTable = '';
	
	//----------------------------------------------------------------------------------------------------
	// Constructor
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function __construct()
	{
		if( defined('static::table') )
		{
			$this->grandTable = static::table;
		}                                                  
		else
		{
			$this->grandTable = str_ireplace([STATIC_ACCESS, 'Grand'], '', get_called_class());
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Insert
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $data: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function insert($data = [])
	{
		return \DB::insert($this->grandTable, $data);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Insert ID
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function insertID()
	{
		return \DB::insertID();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Select
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $select: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function select($select = '*')
	{
		\DB::select($select);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Update
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $data: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function update($data = [], $column = '', $value = '')
	{
		return \DB::where($column, $value)->update($this->grandTable, $data);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Delete
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $column: empty
	// @param string $value : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function delete($column = '', $value = '')
	{
		return \DB::where($column, $value)->delete($this->grandTable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Get
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	protected function _get()
	{
		return \DB::get($this->grandTable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Columns
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function columns()
	{
		return $this->_get()->columns();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Total Columns
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function totalColumns()
	{
		return $this->_get()->totalColumns();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Row
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $printable: false
	//
	//----------------------------------------------------------------------------------------------------
	public function row($printable = false)
	{
		return $this->_get()->row($printable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Result
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $type: object
	//
	//----------------------------------------------------------------------------------------------------
	public function result($type = 'object')
	{
		return $this->_get()->result($type);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Increment
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $columns  : empty
	// @param int   $increment: 1
	//
	//----------------------------------------------------------------------------------------------------
	public function increment($columns = [], $increment = 1)
	{
		return \DB::increment($this->grandTable, $columns, $increment);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Decrement
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $columns  : empty
	// @param int   $decrement: 1
	//
	//----------------------------------------------------------------------------------------------------
	public function decrement($columns = [], $decrement = 1)
	{
		return \DB::decrement($this->grandTable, $columns, $decrement);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Status
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $type: row
	//
	//----------------------------------------------------------------------------------------------------
	public function status($type = 'row')
	{
		return \DB::status($this->grandTable)->$type();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Total Rows
	//----------------------------------------------------------------------------------------------------
	//
	// @param bool $status: false
	//
	//----------------------------------------------------------------------------------------------------
	public function totalRows($status = false)
	{
		return $this->_get()->totalRows($status);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Where
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $column : empty
	// @param string $value  : empty
	// @param string $logical: empty 
	//
	//----------------------------------------------------------------------------------------------------
	public function where($column = '', $value = '', $logical = '')
	{
		\DB::where($column, $value, $logical);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Having
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $column : empty
	// @param string $value  : empty
	// @param string $logical: empty 
	//
	//----------------------------------------------------------------------------------------------------
	public function having($column = '', $value = '', $logical = '')
	{
		\DB::having($column, $value, $logical);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Where Group
	//----------------------------------------------------------------------------------------------------
	//
	// @param array ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function whereGroup(...$args)
	{
		\DB::whereGroup(...$args);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Having Group
	//----------------------------------------------------------------------------------------------------
	//
	// @param array ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function havingGroup(...$args)
	{
		\DB::havingGroup(...$args);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Inner Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table      : empty
	// @param string $otherColumn: empty
	// @param string $operator   : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function innerJoin($table = '', $otherColumn = '', $operator = '=')
	{
		\DB::innerJoin($table, $otherColumn, $operator);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Outer Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table      : empty
	// @param string $otherColumn: empty
	// @param string $operator   : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function outerJoin($table = '', $otherColumn = '', $operator = '=')
	{
		\DB::outerJoin($table, $otherColumn, $operator);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Left Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table      : empty
	// @param string $otherColumn: empty
	// @param string $operator   : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function leftJoin($table = '', $otherColumn = '', $operator = '=')
	{
		\DB::leftJoin($table, $otherColumn, $operator);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Right Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table      : empty
	// @param string $otherColumn: empty
	// @param string $operator   : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function rightJoin($table = '', $otherColumn = '', $operator = '=')
	{
		\DB::rightJoin($table, $otherColumn, $operator);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Join
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $table    : empty
	// @param string $condition: empty
	// @param string $type     : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function join($table = '', $condition = '', $type = '')
	{
		\DB::join($table, $condition, $type);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Duplicate Check
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function duplicateCheck(...$args)
	{
		\DB::duplicateCheck(...$args);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Order By
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $condition: empty
	// @param string $type     : empty
	//
	//----------------------------------------------------------------------------------------------------
	public function orderBy($condition = '', $type = '')
	{
		\DB::orderBy($condition, $type);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Group By
	//----------------------------------------------------------------------------------------------------
	//
	// @param string ...$args
	//
	//----------------------------------------------------------------------------------------------------
	public function groupBy(...$args)
	{
		\DB::groupBy(...$args);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Limit
	//----------------------------------------------------------------------------------------------------
	//
	// @param mixed $start: 0
	// @param int   $limit: 0
	//
	//----------------------------------------------------------------------------------------------------
	public function limit($start = 0, $limit = 0)
	{
		\DB::limit($start, $limit);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Pagination
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $url     : empty
	// @param array  $settings: empty
	// @param bool   $output  : true
	//
	//----------------------------------------------------------------------------------------------------
	public function pagination($url = '', $settings = [], $output = true)
	{
		return $this->_get()->pagination($url, $settings, $output);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Create
	//----------------------------------------------------------------------------------------------------
	//
	// @param array  $data : empty
	// @param string $extra: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function create($data = [], $extra = '')
	{
		return \DBForge::createTable($this->grandTable, $data, $extra);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Drop
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function drop()
	{
		return \DBForge::dropTable($this->grandTable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Truncate
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function truncate()
	{
		return \DBForge::truncate($this->grandTable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Rename
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $newName: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function rename($newName = '')
	{
		return \DBForge::renameTable($this->grandTable, $newName);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Add Column
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $column: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function addColumn($column = [])
	{
		return \DBForge::addColumn($this->grandTable, $column);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Drop Column
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $column: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function dropColumn($column = '')
	{
		return \DBForge::dropColumn($this->grandTable, $column);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Modify Column
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $column: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function modifyColumn($column = [])
	{
		return \DBForge::modifyColumn($this->grandTable, $column);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Rename Column
	//----------------------------------------------------------------------------------------------------
	//
	// @param array $column: empty
	//
	//----------------------------------------------------------------------------------------------------
	public function renameColumn($column = [])
	{
		return \DBForge::renameColumn($this->grandTable, $column);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Optimize
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function optimize()
	{
		return \DBTool::optimizeTables($this->grandTable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Repair
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function repair()
	{
		return \DBTool::repairTables($this->grandTable);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Backup
	//----------------------------------------------------------------------------------------------------
	//
	// @param string $fileName: empty
	// @param string $path    : const STORAGE_DIR
	//
	//----------------------------------------------------------------------------------------------------
	public function backup($fileName = '', $path = STORAGE_DIR)
	{
		return \DBTool::backup($this->grandTable, $fileName, $path);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Error
	//----------------------------------------------------------------------------------------------------
	//
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function error()
	{
		if( $error = \DB::error() )
		{
			return $error;
		}
		elseif( $error = \DBForge::error() )
		{
			return $error;
		}
		elseif( $error = \DBTool::error() )
		{
			return $error;
		}
		else
		{
			return false;
		}
	}
}