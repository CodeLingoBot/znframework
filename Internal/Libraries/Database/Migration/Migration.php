<?php namespace ZN\Database;

class InternalMigration extends \CallController implements MigrationInterface
{   
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif Hakkı: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------
    
    //--------------------------------------------------------------------------------------------------------
    // Migration Path
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var string -- Application/Model/Migrations/
    //
    //--------------------------------------------------------------------------------------------------------
    private $path;  
    
    //--------------------------------------------------------------------------------------------------------
    // Config
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    private $config;
    
    //--------------------------------------------------------------------------------------------------------
    // Class Fix
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var string -- Migrate
    //
    //--------------------------------------------------------------------------------------------------------
    private $classFix;
    
    //--------------------------------------------------------------------------------------------------------
    // Extends Fix
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var string -- Migration
    //
    //--------------------------------------------------------------------------------------------------------
    private $extendsFix;
    
    //--------------------------------------------------------------------------------------------------------
    // Table
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    private $tbl;
    
    //--------------------------------------------------------------------------------------------------------
    // Version
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    private $versionDir = 'Version/';
    
    //--------------------------------------------------------------------------------------------------------
    // Construct
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct()
    {
        $this->config = \Config::get('Database');
        $this->path   = MODELS_DIR.'Migrations/';
        
        if( ! is_dir($this->path) )
        {
            library('FileSystem', 'folder:create', [$this->path, 0755]);    
        }
        
        $this->tbl = isset(static::$table)
                   ? static::$table 
                   : false;
        
        $this->_create();
        
        $this->classFix   = STATIC_ACCESS.'Migrate';
        $this->extendsFix = __CLASS__;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Create Table
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function createTable(Array $data) : Bool
    {
        if( \DBForge::createTable($this->_tableName(), $data) )
        {
            return $this->_action(__FUNCTION__);    
        }   
        else
        {
            return false;   
        }
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Drop Table
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function dropTable() : Bool
    {
        if( \DBForge::dropTable($this->_tableName()) )
        {
            return $this->_action(__FUNCTION__);    
        }   
        else
        {
            return false;
        }
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Add Column
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param array $column
    //
    //--------------------------------------------------------------------------------------------------------
    public function addColumn(Array $column) : Bool
    {
        if( \DBForge::addColumn($this->_tableName(), $column) ) 
        {
            return $this->_action(__FUNCTION__);    
        }
        else
        {
            return false;   
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Drop Column
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param array $column
    //
    //--------------------------------------------------------------------------------------------------------
    public function dropColumn($column) : Bool
    {
        if( \DBForge::dropColumn($this->_tableName(), $column) )
        {
            return $this->_action(__FUNCTION__);    
        }
        else
        {
            return \Exceptions::throws(\DBForge::error(), true);    
        }
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Modify Column
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param array $columns
    //
    //--------------------------------------------------------------------------------------------------------
    public function modifyColumn(Array $column) : Bool
    {
        if( \DBForge::modifyColumn($this->_tableName(), $column) )
        {
            return $this->_action(__FUNCTION__);    
        }
        else
        {
            return false;
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Rename Column
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param array $columns
    //
    //--------------------------------------------------------------------------------------------------------
    public function renameColumn(Array $column) : Bool
    {
        if( \DBForge::renameColumn($this->_tableName(), $column) )
        {
            return $this->_action(__FUNCTION__);    
        }
        else
        {
            return false;
        }
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Truncate
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function truncate() : Bool
    {
        if( \DBForge::truncate($this->_tableName()) )   
        {
            return $this->_action(__FUNCTION__);    
        }
        else
        {
            return false;   
        }
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Path
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string path: NULL
    //
    //--------------------------------------------------------------------------------------------------------
    public function path(String $path = NULL) : InternalMigration
    {
        $this->path = suffix($path);
        
        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Create
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $name -- Migrasyon Adı
    //
    //--------------------------------------------------------------------------------------------------------
    public function create(String $name, Int $ver = 0) : Bool
    {
        if( $version = $this->_version($ver) )
        {
            $dir  = $this->path.$name.$this->versionDir;
            
            if( ! is_dir($dir) )
            {
                \Folder::create($dir);
            }
            
            $file = $dir.suffix($version, '.php');
            $name = $name.$version; 
        }
        else
        {
            $file = $this->path.suffix($name, '.php');
        }
        
        if( ! is_file($file) )
        {   
            $eol  = EOL;
            $str  = '<?php'.$eol;
            $str .= 'class '.$this->classFix.$name.' extends '.$this->extendsFix.$eol;
            $str .= '{'.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'// Call Undefined Method'.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'use CallUndefinedMethodTrait;'.$eol.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'// Class/Table Name'.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'protected static $table = __CLASS__;'.$eol.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'// Up'.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'public function up()'.$eol;
            $str .= "\t".'{'.$eol;
            $str .= "\t\t".'// Queries'.$eol;
            $str .= "\t".'}'.$eol.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'// Down'.$eol;
            $str .= "\t".'//--------------------------------------------------------------------------------------------------------'.$eol;
            $str .= "\t".'public function down()'.$eol;
            $str .= "\t".'{'.$eol;
            $str .= "\t\t".'// Queries'.$eol;
            $str .= "\t\t".'$this->dropTable(); // Varsayılan işlem.'.$eol;
            $str .= "\t".'}'.$eol;
            $str .= '}';
        
            return \File::write($file, $str);
        }
        else
        {
            return false;   
        }
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Delete
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string  $name
    // @param numeric $version
    //
    //--------------------------------------------------------------------------------------------------------
    public function delete(String $name, Int $ver = 0) : Bool
    {
        if( $version = $this->_version($ver) )
        {
            $dir  = $this->path.$name.$this->versionDir;
            $file = $dir.suffix($version, '.php');
            
            if( $ver === 'all' && is_dir($this->path.$name.$this->versionDir) )
            {
                \Folder::delete($this->path.$name.$this->versionDir);   
            }
        }
        else
        {
            $file = $this->path.suffix($name, '.php');
        }
        
        return \File::delete($file);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Delete All
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function deleteAll() : Bool
    {
        if( is_dir($this->path) )
        {
            return \Folder::delete($this->path);    
        }
        else
        {
            return false;   
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Version
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param numeric $numeric
    //
    //--------------------------------------------------------------------------------------------------------
    public function version(Int $version = 0)
    {
        if( empty($this->tbl) )
        {
            return false;   
        }
        
        $name = $this->classFix.$this->_tableName();
        
        if( $version <= 0 )
        {
            return uselib($name);   
        }
        
        $name .= $this->_version($version);
        
        return uselib($name);   
    }

    //--------------------------------------------------------------------------------------------------------
    // Action
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _action($type)
    {
        if( $type === '' )
        {
            $type = 'noAction';
        }
        
        $table   = $this->_tableName();
        $version = $this->_getVersion();
        
        return \DB::insert($this->config['migration:table'], ['name' => $table, 'type' => $type, 'version' => $version, 'date' => \Date::set('Ymdhis')]);
    }

    //--------------------------------------------------------------------------------------------------------
    // Migrations Table Create
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _create()
    {
        $table   = $this->config['migration:table'];
        
        \DBForge::createTable('IF NOT EXISTS '.$table, array
        (
            'name'    => [\DB::varchar(512), \DB::notNull()],
            'type'    => [\DB::varchar(256), \DB::notNull()],
            'version' => [\DB::varchar(3),   \DB::notNull()],
            'date'    => [\DB::varchar(15),  \DB::notNull()]
        ));
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Table Name
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _tableName()
    {
        $table = preg_replace('/[0-9][0-9][0-9]/', '', $this->tbl);
        
        return str_replace($this->classFix, '', $table);    
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Get Version
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _getVersion()
    {
        preg_match('(\w+([0-9][0-9][0-9]))', $this->tbl, $match);
        
        return isset( $match[1] ) ? $match[1] : '000';
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Version
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param numeric $numeric
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _version($numeric)
    {
        $length = strlen((string)$numeric);
        
        if( (int)$numeric > 999 || (int)$numeric < 0 )
        {
            return false;
        }
    
        switch( $length )
        {
            case 1 : $numeric = '00'.$numeric; break;
            case 2 : $numeric = '0'.$numeric;  break;   
        }
        
        if( $numeric === '000' )
        {
            return false;   
        }
        
        return $numeric;
    }
}