<?php namespace ZN\Helpers;

use CallController;

class InternalConverter extends CallController implements ConverterInterface
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif HakkÄ±: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Byte
    //--------------------------------------------------------------------------------------------------------
    //
    // @param float $bytes
    // @param int   $precision
    // @param bool  $unit
    //
    //--------------------------------------------------------------------------------------------------------
    public function byte(Float $bytes, Int $precision = 1, Bool $unit = true) : String
    {
        return ConverterFactory::class('Numeric')->byte($bytes, $precision, $unit);
    }

    //--------------------------------------------------------------------------------------------------------
    // Money
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int    $money
    // @param string $type
    //
    //--------------------------------------------------------------------------------------------------------
    public function money(Int $money = 0, String $type = NULL) : String
    {
        return ConverterFactory::class('Numeric')->money($money, $type);
    }

    //--------------------------------------------------------------------------------------------------------
    // Time
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int    $count
    // @param string $type
    // @param string $output
    //
    //--------------------------------------------------------------------------------------------------------
    public function time(Int $count, String $type = 'second', String $output = 'day') : Float
    {
        return ConverterFactory::class('Numeric')->time($count, $type, $output);
    }

    //--------------------------------------------------------------------------------------------------------
    // Word
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $string
    // @param mixed  $badWords
    // @param mixed  $changeChar
    //
    //--------------------------------------------------------------------------------------------------------
    public function word(String $string, $badWords = NULL, $changeChar = '[badwords]') : String
    {
        return ConverterFactory::class('Text')->word($string, $badWords, $changeChar);
    }

    //--------------------------------------------------------------------------------------------------------
    // Anchor
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $data
    // @param string $type: short, long
    // @param array  $attributes
    //
    //--------------------------------------------------------------------------------------------------------
    public function anchor(String $data, String $type = 'short', Array $attributes = NULL) : String
    {
        return ConverterFactory::class('Text')->anchor($data, $type, $attributes);
    }

    //--------------------------------------------------------------------------------------------------------
    // Char
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $string
    // @param string $type      : char, dec, hex, html
    // @param string $changeType: char, dec, hex, html
    //
    //--------------------------------------------------------------------------------------------------------
    public function char(String $string, String $type = 'char', String $changeType = 'html') : String
    {
        return ConverterFactory::class('Unicode')->char($string, $type, $changeType);
    }

    //--------------------------------------------------------------------------------------------------------
    // Accent
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $str
    //
    //--------------------------------------------------------------------------------------------------------
    public function accent(String $str) : String
    {
        return ConverterFactory::class('Unicode')->char($str);
    }

    //--------------------------------------------------------------------------------------------------------
    // Url Word
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $str
    // @param string $splitWord
    //
    //--------------------------------------------------------------------------------------------------------
    public function urlWord(String $str, String $splitWord = '-') : String
    {
        return ConverterFactory::class('Unicode')->urlWord($str, $splitWord);
    }

    //--------------------------------------------------------------------------------------------------------
    // Charset
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $str
    // @param string $fromCharset
    // @param string $toCharset
    //
    //--------------------------------------------------------------------------------------------------------
    public function charset(String $str, String $fromCharset, String $toCharset = 'utf-8') : String
    {
        return ConverterFactory::class('Unicode')->charset($str, $fromCharset, $toCharset);
    }

    //--------------------------------------------------------------------------------------------------------
    // High Light
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $str
    // @param array $settings
    //
    //--------------------------------------------------------------------------------------------------------
    public function highLight(String $str, Array $settings = []) : String
    {
        return ConverterFactory::class('Text')->highLight($str, $settings);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Int
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toInt($var) : Int
    {
        return ConverterFactory::class('VariableTypes')->toInt($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Integer
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toInteger($var) : Int
    {
        return ConverterFactory::class('VariableTypes')->toInteger($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Bool
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toBool($var) : Bool
    {
        return ConverterFactory::class('VariableTypes')->toBool($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Boolean
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toBoolean($var) : Bool
    {
        return ConverterFactory::class('VariableTypes')->toBoolean($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To String
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toString($var) : String
    {
        return ConverterFactory::class('VariableTypes')->toString($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Float
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toFloat($var) : Float
    {
        return ConverterFactory::class('VariableTypes')->toFloat($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Real
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toReal($var)
    {
        return ConverterFactory::class('VariableTypes')->toReal($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Double
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toDouble($var)
    {
        return ConverterFactory::class('VariableTypes')->toDouble($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Object
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toObject($var) : \stdClass
    {
        return ConverterFactory::class('VariableTypes')->toObject($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Array
    //--------------------------------------------------------------------------------------------------------
    //
    // @param var $var
    //
    //--------------------------------------------------------------------------------------------------------
    public function toArray($var) : Array
    {
        return ConverterFactory::class('VariableTypes')->toArray($var);
    }

    //--------------------------------------------------------------------------------------------------------
    // To Constant
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $var
    // @param string $prefix
    // @param string $suffix
    //
    //--------------------------------------------------------------------------------------------------------
    public function toConstant(String $var, String $prefix = NULL, String $suffix = NULL)
    {
        return ConverterFactory::class('VariableTypes')->toConstant($var, $prefix, $suffix);
    }
}
