<?php
namespace ZN\ImageProcessing;

class InternalThumb extends \CallController implements ThumbInterface
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Sets
	//----------------------------------------------------------------------------------------------------
	// 
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $sets;
	
	//----------------------------------------------------------------------------------------------------
	// Path
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $file
	//
	//----------------------------------------------------------------------------------------------------
	public function path(String $file)
	{
		$this->sets['filePath'] = $file;
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Quality
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $quality
	//
	//----------------------------------------------------------------------------------------------------
	public function quality($quality)
	{
		$this->sets['quality'] = (int) $quality;
	
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Crop
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $x
	// @param int $y
	//
	//----------------------------------------------------------------------------------------------------
	public function crop($x, $y)
	{
		$this->sets['x'] = (int) $x;
		$this->sets['y'] = (int) $y;
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Size
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $width
	// @param int $height
	//
	//----------------------------------------------------------------------------------------------------
	public function size($width, $height)
	{
		$this->sets['width']  = (int) $width;
		$this->sets['height'] = (int) $height;
	
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Resize
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $width
	// @param int $height
	//
	//----------------------------------------------------------------------------------------------------
	public function resize($width, $height)
	{
		$this->sets['rewidth']  = (int) $width;
		$this->sets['reheight'] = (int) $height;

		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Prosize
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $width
	// @param int $height
	//
	//----------------------------------------------------------------------------------------------------
	public function prosize($width, $height)
	{
		$this->sets['prowidth']  = (int) $width;
		$this->sets['proheight'] = (int) $height;

		return $this;
	}
	
	
	//----------------------------------------------------------------------------------------------------
	// Create
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $path
	//
	//----------------------------------------------------------------------------------------------------
	public function create(String $path = NULL)
	{
		if( isset($this->sets['filePath']) )
		{
			$path = $this->sets['filePath'];	
		}
		
		return \Image::thumb($path, $this->sets);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Prosize
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $width
	// @param int $height
	//
	//----------------------------------------------------------------------------------------------------
	public function getProsize($width = 0, $height = 0)
	{
		if( ! isset($this->sets['filePath']) )
		{
			return false;	
		}
		
		return \Image::getProsize($this->sets['filePath'], $width, $height);
	}
}
