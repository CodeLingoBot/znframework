<?php namespace ZN\IndividualStructures;

use CallController;

class InternalBenchmark extends CallController implements BenchmarkInterface
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif HakkÄ±: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Test Start
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $test
    // @return void
    //
    //--------------------------------------------------------------------------------------------------------
    public function start(String $test)
    {
        BenchmarkFactory::class('Testing')->start($test);
    }

    //--------------------------------------------------------------------------------------------------------
    // Test End
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $test
    // @return void
    //
    //--------------------------------------------------------------------------------------------------------
    public function end(String $test)
    {
        BenchmarkFactory::class('Testing')->end($test);
    }

    //--------------------------------------------------------------------------------------------------------
    // Elapsed Time
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string  $result
    // @param  numeric $decimal
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    public function elapsedTime(String $result, Int $decimal = 4) : Float
    {
        return BenchmarkFactory::class('ElapsedTime')->calculate($result, $decimal);
    }

    //--------------------------------------------------------------------------------------------------------
    // Used Files
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $result
    // @return numeric
    //
    //--------------------------------------------------------------------------------------------------------
    public function usedFiles(String $result = NULL) : Array
    {
        return BenchmarkFactory::class('FileUsage')->list($result);
    }

    //--------------------------------------------------------------------------------------------------------
    // Used File Count
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $result
    // @return numeric
    //
    //--------------------------------------------------------------------------------------------------------
    public function usedFileCount(String $result = NULL) : Int
    {
        return BenchmarkFactory::class('FileUsage')->count($result);
    }

    //--------------------------------------------------------------------------------------------------------
    // Calculated Memory
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $result
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    public function calculatedMemory(String $result) : Float
    {
        return BenchmarkFactory::class('MemoryUsage')->calculate($result);
    }

    //--------------------------------------------------------------------------------------------------------
    // Memory Usage
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  bool $realMemory
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    public function memoryUsage(Bool $realMemory = false) : Int
    {
        return BenchmarkFactory::class('MemoryUsage')->normal($realMemory);
    }

    //--------------------------------------------------------------------------------------------------------
    // Max Memory Usage
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  bool $realMemory
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    public function maxMemoryUsage(Bool $realMemory = false) : Int
    {
        return BenchmarkFactory::class('MemoryUsage')->maximum($realMemory);
    }
}
