<?php namespace ZN\IndividualStructures;

class InternalBenchmark extends \CallController implements BenchmarkInterface
{
	//----------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif Hakkı: Copyright (c) 2012-2016, znframework.com
    //
    //----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// Protected Test
	//----------------------------------------------------------------------------------------------------
	//
	// Test isimleri bilgisi 
	//
	// @var  array
	//
	//----------------------------------------------------------------------------------------------------
	protected $tests = [];
	
	//----------------------------------------------------------------------------------------------------
	// Protected Memtests
	//----------------------------------------------------------------------------------------------------
	//
	// Bellek test isimleri bilgisi 
	//
	// @var  array
	//
	//----------------------------------------------------------------------------------------------------
	protected $memtests = [];
	
	//----------------------------------------------------------------------------------------------------
	// Protected Memtests
	//----------------------------------------------------------------------------------------------------
	//
	// Bellek test isimleri bilgisi 
	//
	// @var  array
	//
	//----------------------------------------------------------------------------------------------------
	protected $usedtests = [];
	
	//----------------------------------------------------------------------------------------------------
	// Protected Test Count
	//----------------------------------------------------------------------------------------------------
	//
	// Test sayısı bilgisi 
	//
	// @var  numeric
	//
	//----------------------------------------------------------------------------------------------------
	protected $testCount = 0;
	
	//----------------------------------------------------------------------------------------------------
	// Test Methods Başlangıç
	//----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// Test Start
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  string $test
	// @return void
	//
	//----------------------------------------------------------------------------------------------------
	public function start(String $test)
	{
		// Kaç test kullanıldığını hesaplamak için
		// test count değişkeni birer birer artırılıyor.
		$this->testCount++;
		
		// Yöntem içinden tanımlanan kodlardan kaynaklı
		// fazlalık hesaplanıyor.
		$legancy = ( $this->testCount === 1 ) 
				   ? $legancy = 136 
				   : 48;
	
		$test = $test."_start";
		
		// Mikrotime yöntemi başlatılıyor.
		$this->tests[$test]     = microtime();
		
		// Mikrotime yöntemi başlatılıyor.
		$this->usedtests[$test] = get_required_files();
		
		// Bu satıra kadar olan bellek miktarı hesaplanıyor.
		$this->memtests[$test]  = memory_get_usage() + $legancy;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Test End
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  string $test
	// @return void
	//
	//----------------------------------------------------------------------------------------------------
	public function end(String $test)
	{
		$test = $test."_end";
		
		$this->memtests[$test]  = memory_get_usage();
		
		$this->usedtests[$test] = get_required_files();	
		
		$this->tests[$test]     = microtime();		
	}
	
	//----------------------------------------------------------------------------------------------------
	// Test Methods Bitiş
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Result Methods Başlangıç
	//----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// Elapsed Time
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  string  $result
	// @param  numeric $decimal
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function elapsedTime(String $result, Int $decimal = 4) : Float
	{   
		$resend  = $result."_end";
		$restart = $result."_start";
		
		if( isset($this->tests[$resend]) && isset($this->tests[$restart]) )
		{
			return round(($this->tests[$resend] - $this->tests[$restart]), $decimal);
		}
		else
		{
			return false;
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Used Files
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  string $result
	// @return numeric
	//
	//----------------------------------------------------------------------------------------------------
	public function usedFiles(String $result = NULL) : Array
	{
		if( empty($result) )
		{
			return get_required_files();
		}
		
		$resend  = $result."_end";
		$restart = $result."_start";
		
		if( isset($this->usedtests[$resend]) && isset($this->usedtests[$restart]) )
		{
			return array_diff($this->usedtests[$resend], $this->usedtests[$restart]);
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Used File Count
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  string $result
	// @return numeric
	//
	//----------------------------------------------------------------------------------------------------
	public function usedFileCount(String $result = NULL) : Int
	{
		if( empty($result) )
		{
			return count(get_required_files());
		}
		
		$resend  = $result."_end";
		$restart = $result."_start";
		
		if( isset($this->usedtests[$resend]) && isset($this->usedtests[$restart]) )
		{
			return count($this->usedtests[$resend]) - count($this->usedtests[$restart]);
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Calculated Memory
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  string $result
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function calculatedMemory(String $result) : Int
	{
		$resend  = $result."_end";
		$restart = $result."_start";

		if( isset($this->memtests[$resend]) && isset($this->memtests[$restart]) )
		{
			$calc = $this->memtests[$resend] - $this->memtests[$restart];
		
			return $calc;
		}
		else
		{
			return false;
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// Result Methods Bitiş
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Memory Methods Başlangıç
	//----------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------
	// Memory Usage
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  bool $realMemory
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function memoryUsage(Bool $realMemory = false) : Int
	{
		return  memory_get_usage($realMemory);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Max Memory Usage
	//----------------------------------------------------------------------------------------------------
	// 
	// @param  bool $realMemory
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function maxMemoryUsage(Bool $realMemory = false) : Int
	{
		return  memory_get_peak_usage($realMemory);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Memory Methods Bitiş
	//----------------------------------------------------------------------------------------------------
}