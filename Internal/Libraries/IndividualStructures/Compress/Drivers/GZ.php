<?php namespace ZN\IndividualStructures\Compress\Drivers;

class GZDriver extends Abstracts\CompressDriverMappingAbstract
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif HakkÄ±: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------
    
    //--------------------------------------------------------------------------------------------------------
    // Construct
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct()
    {
        \Support::func('gzopen', 'GZ');  
    }

    //--------------------------------------------------------------------------------------------------------
    // Extract
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function extract($source, $target, $password)
    {
        \Support::func('gzextract', 'GZ Driver Extract');   
    }

    //--------------------------------------------------------------------------------------------------------
    // Write
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $file
    // @param string $data
    // @param string $mode
    //
    //--------------------------------------------------------------------------------------------------------
    public function write($file, $data, $mode)
    {
        $open = gzopen($file, $mode);
        
        if( empty($open) )
        {
            return \Exceptions::throws('Error', 'fileNotFound', $file); 
        }
        
        $return = gzwrite($open, $data, strlen($data));
        
        gzclose($open);
        
        return $return;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Read
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $file
    // @param numeric $length
    // @param string  $type
    //
    //--------------------------------------------------------------------------------------------------------
    public function read($file, $length, $mode)
    {
        $open = gzopen($file, $mode);
        
        if( empty($open) )
        {
            return \Exceptions::throws('Error', 'fileNotFound', $file); 
        }
        
        $return = gzread($open, $length);
        
        gzclose($open);
        
        return $return;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Do
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $data
    // @param numeric $blockSize
    // @param mixed   $workFactor
    //
    //--------------------------------------------------------------------------------------------------------
    public function do($data, $level, $encoding) 
    {
        nullCoalesce($encoding, 'deflate');

        return gzcompress($data, $level, \Converter::toConstant($encoding, 'ZLIB_ENCODING_'));
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Undo
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $data
    // @param numeric $small
    //
    //--------------------------------------------------------------------------------------------------------
    public function undo($data, $length)
    {
        return gzuncompress($data, $length);
    }
}