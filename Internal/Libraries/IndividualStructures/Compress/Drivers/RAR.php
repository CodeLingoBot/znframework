<?php namespace ZN\IndividualStructures\Compress\Drivers;

class RarDriver extends Abstracts\CompressDriverMappingAbstract
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif HakkÄ±: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Construct
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct()
    {
        \Support::func('rar_open', 'RAR');  
    }

    //--------------------------------------------------------------------------------------------------------
    // Extract
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param  string $source
    // @param  string $target
    // @return bool
    //
    //--------------------------------------------------------------------------------------------------------
    public function extract($source, $target, $password)
    {
        $rarFile = rar_open(suffix($source, '.rar'), $password);
        $list    = rar_list($rarFile);
        
        if( ! empty($list) ) foreach( $list as $file ) 
        {
            $entry = rar_entry_get($rarFile, $file);
            $entry->extract($target);
        }
        else
        {
            return \Exceptions::throws('Error', 'emptyVariable', '$list');  
        }
        
        rar_close($rarFile);
    }

    //--------------------------------------------------------------------------------------------------------
    // Write
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $file
    // @param string $data
    // @param string $mode
    //
    //--------------------------------------------------------------------------------------------------------
    public function write($file, $data, $mode)
    {
        return uselib('GZDriver')->write($file, $data, $mode);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Read
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $file
    // @param numeric $length
    // @param string  $type
    //
    //--------------------------------------------------------------------------------------------------------
    public function read($file, $length, $mode)
    {
        return uselib('GZDriver')->write($file, $length, $mode);
    }

    //--------------------------------------------------------------------------------------------------------
    // Do
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $data
    // @param numeric $blockSize
    // @param mixed   $workFactor
    //
    //--------------------------------------------------------------------------------------------------------
    public function do($data, $level = NULL, $encoding = NULL)
    {
        return uselib('GZDriver')->do($data, $level, $encoding);
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Undo
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $data
    // @param numeric $small
    //
    //--------------------------------------------------------------------------------------------------------
    public function undo($data, $length = NULL)
    {
        return uselib('GZDriver')->undo($data, $length);
    }
}