<?php 
namespace ZN\Services;

class InternalCURL extends \CallController implements CURLInterface
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Init
	//----------------------------------------------------------------------------------------------------
	// 
	// @var resource
	//
	//----------------------------------------------------------------------------------------------------
	protected $init;
	 
	//----------------------------------------------------------------------------------------------------
	// Options
	//----------------------------------------------------------------------------------------------------
	// 
	// @var array
	//
	//----------------------------------------------------------------------------------------------------
	protected $options = [];

	//----------------------------------------------------------------------------------------------------
	// Construct
	//----------------------------------------------------------------------------------------------------
	// 
	// @var void
	//
	//----------------------------------------------------------------------------------------------------
	public function __construct()
	{
		\Support::func('curl_exec', 'CURL');
	}
	
	//----------------------------------------------------------------------------------------------------
	// Init
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $url
	//
	//----------------------------------------------------------------------------------------------------
	public function init(String $url = NULL)
	{	
		$this->init = curl_init($url);
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Exec
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function exec()
	{
		if( ! is_resource($this->init) )
		{
			return false;
		}
		
		curl_setopt_array($this->init, $this->options);

		$this->options = [];
		
		if( is_resource($this->init) )
		{
			return curl_exec($this->init);
		}
		
		return false;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Escape
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $url
	//
	//----------------------------------------------------------------------------------------------------
	public function escape(String $str)
	{
		if( ! is_resource($this->init) )
		{
			return \Exceptions::throws('Error', 'resourceParameter', '1.(ch)');
		}
		
		return curl_escape($this->init, $str);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Unescape
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $url
	//
	//----------------------------------------------------------------------------------------------------
	public function unescape(String $str)
	{
		if( ! is_resource($this->init) )
		{
			return \Exceptions::throws('Error', 'resourceParameter', '1.(ch)');
		}
		
		return curl_unescape($this->init, $str);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Info
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $opt
	//
	//----------------------------------------------------------------------------------------------------
	public function info(String $opt)
	{
		if( ! is_resource($this->init) )
		{
			return \Exceptions::throws('Error', 'resourceParameter', '1.(ch)');
		}
		
		return curl_getinfo($this->init, \Convert::toConstant($opt, 'CURLINFO_'));
	}
	
	//----------------------------------------------------------------------------------------------------
	// Error
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function error()
	{
		if( ! is_resource($this->init) )
		{
			return \Exceptions::throws('Error', 'resourceParameter', '1.(ch)');
		}
		
		return curl_error($this->init);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Errno
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function errno()
	{
		if( ! is_resource($this->init) )
		{
			return \Exceptions::throws('Error', 'resourceParameter', '1.(ch)');
		}
		
		return curl_errno($this->init);
	}

	//----------------------------------------------------------------------------------------------------
	// Pause
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $bitmask
	//
	//----------------------------------------------------------------------------------------------------
	public function pause(Int $bitmask = 0)
	{
		if( ! empty($this->init) )
		{
			return curl_pause($this->init, $bitmask);
		}

		return false;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Reset
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function reset()
	{
		if( ! empty($this->init) )
		{
			return curl_reset($this->init);
		}

		return false;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Option
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $options
	// @param mixed  $value
	//
	//----------------------------------------------------------------------------------------------------
	public function option(String $options, $value)
	{		
		$this->options[\Convert::toConstant($options, 'CURLOPT_')] = $value;
		
		return $this;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Close
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function close()
	{
		$init = $this->init;
		
		if( is_resource($init) )
		{
			$this->init = NULL;
			
			return curl_close($init);
		}
		
		return false;
	}

	//----------------------------------------------------------------------------------------------------
	// Errval
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $errno
	//
	//----------------------------------------------------------------------------------------------------
	public function errval(Int $errno = 0)
	{
		return curl_strerror($errno);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Version
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $errno
	//
	//----------------------------------------------------------------------------------------------------
	public function version($data = NULL)
	{
		$version = curl_version();
		
		if( $data === NULL )
		{
			return $version;	
		}
		else
		{
			if( isset($version[$data]) )
			{
				return $version[$data];
			}	
			else
			{
				return false;	
			}
		}
	}
	
	//----------------------------------------------------------------------------------------------------
	// __destruct()
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function __destruct()
	{
		$this->close();	
	}
}