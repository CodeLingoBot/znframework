<?php 
namespace ZN\Services;

class InternalNet extends \CallController implements NetInterface
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif HakkÄ±: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------
	// Protected Clean HTTP
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	//
	//----------------------------------------------------------------------------------------------------
	protected function cleanHttp($host)
	{
		return str_ireplace(['http://', 'https://'], '', $host);	
	}
	
	//----------------------------------------------------------------------------------------------------
	// Check DNS
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	// @param string $type
	//
	//----------------------------------------------------------------------------------------------------
	public function checkDns(String $host, String $type = 'MX')
	{
		return checkdnsrr($this->cleanHttp($host), $type);
	}
	
	//----------------------------------------------------------------------------------------------------
	// DNS Records
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	// @param string $type
	// @param bool   $raw
	//
	//----------------------------------------------------------------------------------------------------
	public function dnsRecords(String $host, String $type = 'any', Bool $raw = false)
	{
		$dns = dns_get_record($this->cleanHttp($host), \Converter::toConstant($type, 'DNS_'), $auth, $add, $raw);
		
		return (object)array
		(
			'records' => $dns,
			'authns'  => $auth,
			'addtl'   => $add
		);
	}
	
	//----------------------------------------------------------------------------------------------------
	// MX Records
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	//
	//----------------------------------------------------------------------------------------------------
	public function mxRecords(String $host)
	{
		$mx = getmxrr($this->cleanHttp($host), $mxhosts, $weight);
		
		return (object)array
		(
			'records' => $mxhosts,
			'weight'  => $weight
		);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Socket
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	// @param int    $port
	// @param int    $timeout
	//
	//----------------------------------------------------------------------------------------------------
	public function socket(String $host, Int $port = -1, Int $timeout = 60)
	{
		$socket = fsockopen($this->cleanHttp($host), $port, $errno, $errstr, $timeout);
		
		\Exceptions::throws($errno);
		\Exceptions::throws($errstr);
		
		return $socket;
	}
	
	//----------------------------------------------------------------------------------------------------
	// Psocket
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	// @param int    $port
	// @param int    $timeout
	//
	//----------------------------------------------------------------------------------------------------
	public function psocket(String $host, Int $port = -1, Int $timeout = 60)
	{
		if( ! is_string($host) )
		{
			return \Exceptions::throws('Error', 'stringParameter', '1.(host)');	
		}
		
		if( ! is_numeric($port) )
		{
			return \Exceptions::throws('Error', 'numericParameter', '2.(port)');	
		}
		
		$socket = pfsockopen($this->cleanHttp($host), $port, $errno, $errstr, $timeout);
		
		\Exceptions::throws($errno);
		\Exceptions::throws($errstr);
		
		return $socket;
	}
	
	//----------------------------------------------------------------------------------------------------
	// IP v4 To Host
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $ip
	//
	//----------------------------------------------------------------------------------------------------
	public function ipv4ToHost(String $ip)
	{
		return gethostbyaddr($ip);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Host To IP v4
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	//
	//----------------------------------------------------------------------------------------------------
	public function hostToIpv4(String $host)
	{
		return gethostbyname($this->cleanHttp($host));
	}
	
	//----------------------------------------------------------------------------------------------------
	// Host To IP v4 List
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $host
	//
	//----------------------------------------------------------------------------------------------------
	public function hostToIpv4List(String $host)
	{
		return gethostbynamel($this->cleanHttp($host));
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protocol Number
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $name
	//
	//----------------------------------------------------------------------------------------------------
	public function protocolNumber(String $name)
	{
		return getprotobyname($name);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protocol Name
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $number
	//
	//----------------------------------------------------------------------------------------------------
	public function protocolName(Int $number)
	{
		return getprotobynumber($number);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Service Port
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $service
	// @param string $protocol
	//
	//----------------------------------------------------------------------------------------------------
	public function servicePort(String $service, String $protocol)
	{
		return getservbyname($service, $protocol);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Service Name
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int    $port
	// @param string $protocol
	//
	//----------------------------------------------------------------------------------------------------
	public function serviceName(Int $port, String $protocol)
	{
		return getservbyport($port, $protocol);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Local
	//----------------------------------------------------------------------------------------------------
	// 
	// @param void
	//
	//----------------------------------------------------------------------------------------------------
	public function local()
	{
		return gethostname();
	}
	
	//----------------------------------------------------------------------------------------------------
	// Rcode
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $code
	//
	//----------------------------------------------------------------------------------------------------
	public function rcode(Int $code = NULL)
	{
		return http_response_code($code);
	}

	//----------------------------------------------------------------------------------------------------
	// Chr To Ip V4
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $chr
	//
	//----------------------------------------------------------------------------------------------------
	public function chrToIpv4(String $chr)
	{
		return inet_ntop($chr);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Ip v4 To Chr
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $addr
	//
	//----------------------------------------------------------------------------------------------------
	public function ipv4ToChr(String $addr)
	{
		return inet_pton($addr);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Ip v4 To Number
	//----------------------------------------------------------------------------------------------------
	// 
	// @param string $ip
	//
	//----------------------------------------------------------------------------------------------------
	public function ipv4ToNumber(String $ip)
	{
		return ip2long($ip);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Number To IP v4
	//----------------------------------------------------------------------------------------------------
	// 
	// @param int $numberAddress
	//
	//----------------------------------------------------------------------------------------------------
	public function numberToIpv4(Int $numberAddress)
	{
		return long2ip($numberAddress);
	}
}