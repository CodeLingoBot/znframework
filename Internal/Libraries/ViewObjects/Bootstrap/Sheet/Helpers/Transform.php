<?php namespace ZN\ViewObjects\Bootstrap\Sheet\Helpers;

use ZN\ViewObjects\Bootstrap\SheetTrait;
use CallController;

class Transform extends CallController
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Telif HakkÄ±: Copyright (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------
    
    //--------------------------------------------------------------------------------------------------------
    // Style Sheet Trait
    //--------------------------------------------------------------------------------------------------------
    // 
    // methods
    //
    //--------------------------------------------------------------------------------------------------------
    use SheetTrait;
    
    //--------------------------------------------------------------------------------------------------------
    // Transform
    //--------------------------------------------------------------------------------------------------------
    // 
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $transforms = [];
    
    //--------------------------------------------------------------------------------------------------------
    // Matrix
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param numeric variadic $arguments
    //
    //--------------------------------------------------------------------------------------------------------
    public function matrix(...$arguments) : Transform
    {
        $this->transforms['matrix'] = "matrix(".$this->_params($arguments).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Rotate
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $argument
    //
    //--------------------------------------------------------------------------------------------------------
    public function rotate(String $argument) : Transform
    {
        if( is_numeric($argument) )
        {
            $argument = $argument."deg";
        }
        
        $this->transforms['rotate'] = "rotate(".$this->_params($argument).")";
        
        return $this;
    }
    
    
    //--------------------------------------------------------------------------------------------------------
    // Scale
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param int $x
    // @param int $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function scale(Int $x, Int $y) : Transform
    {
        $this->transforms['scale'] = "scale(".$this->_params("$x,$y").")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Scale X
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param int $x
    //
    //--------------------------------------------------------------------------------------------------------
    public function scaleX(Int $x) : Transform
    {   
        $this->transforms['scalex'] = "scaleX(".$this->_params($x).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Scale Y
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param int $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function scaleY(Int $y) : Transform
    {
        $this->transforms['scaley'] = "scaleY(".$this->_params($y).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Skew
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $x
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function skew(String $x, String $y) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."deg";
        }   

        if( is_numeric($y) )
        {
            $y = $y."deg";
        }
        
        $this->transforms['skew'] = "skew(".$this->_params("$x,$y").")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Skew X
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $x
    //
    //--------------------------------------------------------------------------------------------------------
    public function skewX(String $x) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."deg";
        }       
        
        $this->transforms['skewx'] = "skewX(".$this->_params($x).")";
        
        return $this;
    }
        
    //--------------------------------------------------------------------------------------------------------
    // Skew Y
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function skewY(String $y) : Transform
    {
        if( is_numeric($y) )
        {
            $y = $y."deg";
        }       
        
        $this->transforms['skewy'] = "skewY(".$this->_params($y).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Translate
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $x
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function translate(String $x, String $y) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."px";
        }       
        
        if( $y !== 0 )
        {
            if( is_numeric($y) )
            {
                $y = $y."px";
            }
            
            $args = "$x,$y";        
        }
        else
        {
            $args = $x; 
        }
        
        $this->transforms['translate'] = "translate(".$this->_params($args).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Transtele X
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $x
    //
    //--------------------------------------------------------------------------------------------------------
    public function translateX(String $x) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."px";
        }       
        
        $this->transforms['translatex'] = "translateX(".$this->_params($x).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Transtele Y
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function translateY(String $y) : Transform
    {
        if( is_numeric($y) )
        {
            $y = $y."px";
        }       
        
        $this->transforms['translatey'] = "translateY(".$this->_params($y).")";
        
        return $this;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Create
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function create() : String
    {
        $transforms = '';
        
        if( ! empty($this->transforms) ) foreach( $this->transforms as $trans )
        {
            $transforms .= $trans;
        }   
        
        $transforms = $this->_transform($transforms);
        
        $this->_defaultVariable();
        
        return $this->_tag($transforms);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Params
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _params($data)
    {
        $arguments = $data;
        $argument  = '';
        
        if( is_array($data) )
        {
            foreach($arguments as $arg)
            {
                $argument .= $arg.",";
            }
            
            $argument = substr($argument, 0, -1);
        }
        else
        {
            $argument = $data;  
        }   
        
        return $argument;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Protected Transform
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param string $data
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _transform($data)
    {
        $str  = '';
        $str .= $this->selector."{".EOL;    
        
        foreach( $this->browsers as $val )
        {
            $str .= $val."transform:$data;".EOL;
        }
        
        $str .= "}".EOL;
        
        return $str;
    }
    
    //--------------------------------------------------------------------------------------------------------
    // Protected Default Variable
    //--------------------------------------------------------------------------------------------------------
    // 
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariable()
    {
        $this->selector   = 'this';
        $this->transforms = [];
    }
}