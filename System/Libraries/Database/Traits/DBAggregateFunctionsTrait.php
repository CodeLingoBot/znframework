<?php
trait DBAggregateFunctionsTrait
{
	/******************************************************************************************
	* AVG                                                                                     *
	*******************************************************************************************
	| Genel Kullanım: Tabloya ait kolonların ortamalasını alır.				 				  |
	
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function avg()
	{
		return $this->_math('AVG', func_get_args());
	}
	
	/******************************************************************************************
	* MIN                                                                                     *
	*******************************************************************************************
	| Genel Kullanım: Tabloya ait kolonlardan değeri minimum olanı alır.				 	  |
	
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function min()
	{
		return $this->_math('MIN', func_get_args());
	}
	
	/******************************************************************************************
	* MAX                                                                                     *
	*******************************************************************************************
	| Genel Kullanım: Tabloya ait kolonlardan değeri maksimum olanı alır.				 	  |
	
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function max()
	{
		return $this->_math('MAX', func_get_args());
	}
	
	/******************************************************************************************
	* COUNT                                                                                   *
	*******************************************************************************************
	| Genel Kullanım: Tabloya ait satır sayısını verir.									 	  |
	
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function count()
	{
		return $this->_math('COUNT', func_get_args());
	}
	
	/******************************************************************************************
	* SUM                                                                                     *
	*******************************************************************************************
	| Genel Kullanım: Tabloya ait kolonların toplamını alır.				 				  |
	
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function sum()
	{
		return  $this->_math('SUM', func_get_args());
	}
	
	/******************************************************************************************
	* BIT_COUNT                                                                                    *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function bitCount()
	{
		return $this->_math('BIT_COUNT', func_get_args());
	}
	
	/******************************************************************************************
	* BIT_AND                                                                                    *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function bitAnd()
	{
		return $this->_math('BIT_AND', func_get_args());
	}
	
	/******************************************************************************************
	* BIT_OR                                                                                    *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function bitOr()
	{
		return $this->_math('BIT_OR', func_get_args());
	}
	
	/******************************************************************************************
	* BIT_XOR                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function bitXor()
	{
		return $this->_math('BIT_XOR', func_get_args());
	}
	
	/******************************************************************************************
	* GROUP_CONCAT                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function groupConcat()
	{
		return $this->_math('GROUP_CONCAT', func_get_args());
	}
	
	/******************************************************************************************
	* STD                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function std()
	{
		return $this->_math('STD', func_get_args());
	}
	
	/******************************************************************************************
	* STDDEV_POP                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function stdDevPop()
	{
		return $this->_math('STDDEV_POP', func_get_args());
	}
	
	/******************************************************************************************
	* STDDEV_SAMP                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function stdDevSamp()
	{
		return $this->_math('STDDEV_SAMP', func_get_args());
	}
	
	/******************************************************************************************
	* STDDEV                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function stdDev()
	{
		return $this->_math('STDDEV', func_get_args());
	}
	
	/******************************************************************************************
	* VAR_POP                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function varPop()
	{
		return $this->_math('VAR_POP', func_get_args());
	}
	
	/******************************************************************************************
	* VAR_SAMP                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function varSamp()
	{
		return $this->_math('VAR_SAMP', func_get_args());
	}
	
	/******************************************************************************************
	* VARIANCE                                                                                   *
	*******************************************************************************************
	| 																					 	  |
	  @param args
		
	  @return string
	|          																				  |
	******************************************************************************************/
	public function variance()
	{
		return $this->_math('VARIANCE', func_get_args());
	}
}