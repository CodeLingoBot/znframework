<?php
class __USE_STATIC_ACCESS__JQ
{
	//----------------------------------------------------------------------------------------------------
	//
	// Yazar      : Ozan UYKUN <ozanbote@windowslive.com> | <ozanbote@gmail.com>
	// Site       : www.zntr.net
	// Lisans     : The MIT License
	// Telif Hakkı: Copyright (c) 2012-2016, zntr.net
	//
	//----------------------------------------------------------------------------------------------------
	
	use JqueryTrait;
	
	//----------------------------------------------------------------------------------------------------
	// Call Method
	//----------------------------------------------------------------------------------------------------
	// 
	// __call()
	//
	//----------------------------------------------------------------------------------------------------
	use CallUndefinedMethodTrait;
	
	//----------------------------------------------------------------------------------------------------
	// Property
	//----------------------------------------------------------------------------------------------------
	//
	// @var  string
	//
	//----------------------------------------------------------------------------------------------------
	protected $property = '';
	
	//----------------------------------------------------------------------------------------------------
	// Func
	//----------------------------------------------------------------------------------------------------
	//
	// @var  string
	//
	//----------------------------------------------------------------------------------------------------
	protected $func = '';
	
	//----------------------------------------------------------------------------------------------------
	// Attr
	//----------------------------------------------------------------------------------------------------
	//
	// @var  string
	//
	//----------------------------------------------------------------------------------------------------
	protected $attr = '';
	
	//----------------------------------------------------------------------------------------------------
	// Selector
	//----------------------------------------------------------------------------------------------------
	//
	// Seçici belirtmek için kullanılır.
	//
	// @param  string $selector
	// @return string 
	//
	//----------------------------------------------------------------------------------------------------
	public function selector($selector = '')
	{
		if( ! isChar($selector) )
		{
			Error::set('Error', 'valueParameter', 'selector');
			return $this;	
		}
		
		if( $this->_isKeySelector($selector) )
		{
			$code = $selector;	
		}
		else
		{
			$code = "\"$selector\"";	
		}
		
		return "$($code)";
	}
	
	//----------------------------------------------------------------------------------------------------
	// Property
	//----------------------------------------------------------------------------------------------------
	//
	// Jquery propertisi oluşturmak için kullanılır.
	//
	// @param string $property
	// @param array  $params
	// @param bool   $comma false
	//  
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function property($property = '', $params = array(), $comma = false)
	{
		if( ! is_string($property) || empty($property) )
		{
			return Error::set('Error', 'stringParameter', 'property');	
		}

		return ".$property(". $this->_params($params).")".($comma === true ? ";" : "");
	}
	
	//----------------------------------------------------------------------------------------------------
	// Func
	//----------------------------------------------------------------------------------------------------
	//
	// Jquery fonksiyonu oluşturmak için kullanılır.
	//
	// @param string $params
	// @param string $code
	// @param bool   $comma false
	//  
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function func($params = '', $code = '', $comma = false)
	{
		if( empty($code) )
		{
			return false;	
		}
		
		return "function($params){".$code."}".($comma === true ? ";" : "");
	}
	
	//----------------------------------------------------------------------------------------------------
	// Callback / Func
	//----------------------------------------------------------------------------------------------------
	//
	// Jquery fonksiyonu oluşturmak için kullanılır.
	//
	// @param string $params
	// @param string $code
	// @param bool   $comma false
	//  
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function callback($params = '', $code = '', $comma = false)
	{
		return $this->func($params, $code, $comma);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Combine
	//----------------------------------------------------------------------------------------------------
	//
	// Genel jquery komutu oluşturmak için kullanılır.
	//
	// @param string $selector
	// @param string $property
	// @param array  $params
	// @param string $callback
	// @param bool   $comma false
	//  
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function combine($selector = '', $property = '', $params = '', $callback = '', $comma = false)
	{
		if( ! empty($callback) )
		{
			$params[] = array($this->func('e', $callback));
		}
		
		return $this->selector($selector).$this->property($property, $params, $comma);		   
	}
	
	//----------------------------------------------------------------------------------------------------
	// Serialize
	//----------------------------------------------------------------------------------------------------
	//
	// Genel jquery serialize komutu oluşturmak için kullanılır.
	//
	// @param string $selector
	// @param array  $func
	// @param bool   $comma false
	//  
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function serialize($selector = '', $params = array(), $comma = false)
	{
		return $this->combine($selector, 'serialize', $params, '', $comma);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Js Func
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $func
	// @param  string $code
	// @param  bool   $comma
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	protected function _jsFunc($func = '', $code = '', $comma = false)
	{
		if( empty($code) )
		{
			return false;	
		}
		
		return "$func($code)".($comma === true ? ";" : "");
	}
	
	//----------------------------------------------------------------------------------------------------
	// Alert 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $code
	// @param  bool   $comma
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function alert($code = '', $comma = true)
	{
		return $this->_jsFunc('alert', $code, $comma);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Confirm 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $code
	// @param  string $true
	// @param  string $false
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function confirm($code = '', $true = '', $false = '')
	{
		 $confirm = $this->_jsFunc('confirm', $code, false);
		 
		 if( empty($true) )
		 {
			 return "$confirm;";
		 }
		 
		 return $this->ifClause("$confirm === true", $true).$this->elseClause($false);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Protected Clause 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $type
	// @param  string $condition
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	protected function _clause($type = '', $condition = '', $code = '')
	{
		$eol = eol();
		return $this->_jsFunc($type, $condition, false)."{".$code."}";
	}
	
	//----------------------------------------------------------------------------------------------------
	// If Clause 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $condition
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function ifClause($condition = '', $code = '')
	{
		return $this->_clause('if', $condition, $code);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Else If Clause 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $condition
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function elseIfClause($condition = '', $code = '')
	{
		return $this->_clause('else if', $condition, $code);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Else Clause 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function elseClause($code = '')
	{
		return "else{".$code."}";
	}
	
	//----------------------------------------------------------------------------------------------------
	// For Loop 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $condition
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function forLoop($condition = '', $code = '')
	{
		return $this->_clause('for', $condition, $code);
	}
	
	//----------------------------------------------------------------------------------------------------
	// While Loop 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $condition
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function whileLoop($condition = '', $code = '')
	{
		return $this->_clause('while', $condition, $code);
	}
	
	//----------------------------------------------------------------------------------------------------
	// Do While Loop
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $condition
	// @param  string $code
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function doWhileLoop($condition, $code = '')
	{
		return "do{".$code."}while(".$condition.")";
	}
	
	//----------------------------------------------------------------------------------------------------
	// Switch Clause 
	//----------------------------------------------------------------------------------------------------
	//
	// @param  string $condition
	// @param  array  $cases
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function switchClause($condition = '', $cases = array())
	{
		$clause = '';
		
		if( ! empty($cases) ) foreach( $cases as $case => $code )
		{
			if( $case !== 'multiple' )
			{
				if( $case !== 'default' )
				{
					$clause .= "case $case : $code break; ";
				}
				else
				{
					$clause .= "$case : $code";
				}
			}
			else
			{
				$multiple = isset($code[0]) ?  $code[0] : array();
				$mcode    = isset($code[1]) ?  $code[1] : '';
				
				if( ! empty($multiple) ) foreach( $multiple as $val )
				{
					$clause .= "case $val : ";	
				}
				
				$clause .= "$mcode break; ";
			}
		}
		
		return "switch($condition){".$clause."}";
	}
	
	//----------------------------------------------------------------------------------------------------
	// To Json
	//----------------------------------------------------------------------------------------------------
	//
	// @param  mixed  $params
	// @param  boole  $comma
	// @return string
	//
	//----------------------------------------------------------------------------------------------------
	public function toJson($params = array(), $comma = false)
	{
		return '$'.$this->property('toJSON', $params, $comma);
	}
}